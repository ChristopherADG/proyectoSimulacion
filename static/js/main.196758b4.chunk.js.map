{"version":3,"sources":["services/util.js","imgs/exponencial.png","imgs/uniforme.png","imgs/poisson.png","imgs/bernoulli.png","imgs/erlang.png","imgs/normalConv.png","imgs/binomial.png","components/corridaArribaAbajoMedia.js","components/cuadradosMedios.js","components/productosMedios.js","components/multiplicadorConstante.js","components/lineal.js","components/congruencialMultiplicativo.js","components/congruencialAditivo.js","components/congruencialCuadrativo.js","components/medias.js","components/varianza.js","components/series.js","components/corridaArribaAbajo.js","components/kolmogorov.js","components/chi-Cuadrada.js","components/transformadaInversa.js","components/convolucion.js","components/huecos.js","components/poker.js","components/home.js","components/routes.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCentro","numero","digitos","textoNumero","length","largo","Math","floor","slice","transformToR","x","d","pow","toFixed","CorridaArribaAbajoMedia","useState","numeros","setNumeros","c","setC","N","setN","C0","setC0","N1","setN1","N0","setN0","MC0","setMC0","VariazaC0","setVariazaC0","Z0","setZ0","Hipot","setHipot","className","Jumbotron","htmlFor","id","type","value","onChange","e","target","rows","onClick","tempArr","split","n","temp","countSwitch","swithflag","flag","standardNormalTable","forEach","val","index","console","log","parseFloat","count1","reduce","a","b","trim","parseInt","count0","mc0","variazaC0","z0","abs","sqrt","prueba","scope","CuadradosMedios","setD","seed","setSeed","amount","setAmount","generatedNums","setGeneratedNums","useEffect","seedLength","toString","constuct","w","y","z","min","max","style","marginTop","seedSquare","middleSeedValues","modifyNums","push","i","generateNums","map","ProductosMedios","seed2","setSeed2","seed2Length","v","MultiplicadorConstante","alert","Lineal","setA","m","setM","CongruencialMultiplicativo","k","setK","g","setG","CongruencialAditivo","arr","CongruencialCuadratico","setB","Medias","alpha","setAlpha","LI","setLI","LS","setLS","R","setR","media","temp2","hipot","Varianza","varianza","degreeFreed","tempAlp","limitInf","chiSquareInverse","invChiSquareCDF","limitSup","Series","setCuadrants","numbersCSVString","setNumbersCSVString","setNumbers","setNumbersLength","x2Total","setX2Total","acepta","setAcepta","testRun","setTestRun","oiTotal","setOiTotal","eiTotal","setEiTotal","chiValue","setChiValue","testTable","setTestTable","calculateSeriesTest","nums","tempNumberlenght","tempM","notFound","ibase2","closestSquareTable","coordinates","ei","xValue","yValue","base","coordX","coordY","range","tableCuadrnts","j","lowerX","higherX","lowerY","higherY","ammountByCuadrant","tempOi","Array","fill","tempx2Vals","tempx2TotalVal","oitotal","eitotal","tempTestTable","interval","oi","x2","for","CorridaArribaAbajo","swithFlag","Kolmogorov","Dmas","setDmas","Dmenos","setDmenos","Dna","setDna","D","sort","arr1","arr3","arr4","arr5","table","d_max","d_min","d_table","d_value","ChiCuadrada","resultList","setResultList","low","hight","countList","round","count","element","tempElemet","finalList","result","tempr","tempchi","fac","TransformadaInversa","lamda","setLamda","setMedia","mediaPiezas","setMediaPiezas","probaPiezas","setProbaPiezas","random","pos","r","probs","prob","E","piezas","acumulado","index2","src","uniforme","alt","exponencial","bernoulli","poisson","Convolucion","temmp","multi","cont","tope2","tot","num","r6","tempNums","res","be","erlang","normal","bino","Huecos","rawList","setRawList","minInter","setMinInter","maxInter","setMaxInter","setTable","H","setH","estTotal","setEstTotal","display","setDisplay","inputToList","normalizeList","list","newList","fillTable","getOi","firstTable","getEi","getEstadistico","firstOne","indexOf","f","h","holes","obj","total","getResultMessage","normList","calculate","key","PruebaPoker","setNums","setnumList","numbersLength","todoDif","unPar","dosPares","unaTercia","terciaPar","poker","quintilla","categories","setCategories","setEi","eiOi","setEiOi","x20","setx20","chi2","setChi2","prob5D","prob3D","prob4D","numberList","sorted","replace","s","substring","join","tempCat","dosPar","str","first","second","third","fourth","fifth","all","includes","td","unP","dosP","unT","terciaP","p","q","chisq","solve5D","Home","Routes","path","component","exact","Poker","Header","Navbar","bg","variant","expand","to","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.196758b4.chunk.js","sourcesContent":["const getCentro = (numero, digitos) => {\n    numero += '';\n    let textoNumero = (numero.length - digitos) % 2 == 0 ? '' + numero : '0' + numero;\n    let largo = Math.floor((textoNumero.length - digitos) / 2);\n    return textoNumero.slice(largo, largo + digitos);\n}\n\nconst transformToR = (x, d) => (x * Math.pow(10, -d)).toFixed(d);\n\nmodule.exports = { getCentro, transformToR };","module.exports = __webpack_public_path__ + \"static/media/exponencial.7ff4d7e4.png\";","module.exports = __webpack_public_path__ + \"static/media/uniforme.64ff20e2.png\";","module.exports = __webpack_public_path__ + \"static/media/poisson.2d77d709.png\";","module.exports = __webpack_public_path__ + \"static/media/bernoulli.9cd4b557.png\";","module.exports = __webpack_public_path__ + \"static/media/erlang.f19c9909.png\";","module.exports = __webpack_public_path__ + \"static/media/normalConv.5020218b.png\";","module.exports = __webpack_public_path__ + \"static/media/binomial.fd72f271.png\";","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\n\nconst CorridaArribaAbajoMedia = () => {\n    let [numeros, setNumeros] = useState('');\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [N, setN] = useState(0);\n    let [C0, setC0] = useState(0);\n    let [N1, setN1] = useState(0);\n    let [N0, setN0] = useState(0);\n    let [MC0, setMC0] = useState(0);\n    let [VariazaC0, setVariazaC0] = useState(0);\n    let [Z0, setZ0] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = 0.5;\n        let countSwitch = 0;\n        let swithflag = 0;\n\n        let temp;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            console.log(val)\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        let count1 = tempArr.reduce((a, b) => {\n            let temp = parseFloat(b.trim()) > media ? 1 : 0\n            if (temp != swithflag) {\n                countSwitch++;\n                swithflag = !swithflag;\n            }\n            return parseInt(a) + temp;\n        }, 0)\n        let count0 = n - count1\n\n        setC0(countSwitch)\n        setN1(count1)\n        setN0(count0);\n        let mc0 = ((2 * count1 * count0) / n) + (1 / 2);\n        setMC0(mc0.toFixed(4));\n\n        let variazaC0 = ((2 * count0 * count1) * (2 * count0 * count1 - n)) / ((n * n) * (n - 1))\n        setVariazaC0(variazaC0.toFixed(4))\n\n        temp = (temp * .01).toFixed(2);\n\n        let z0 = Math.abs((countSwitch - mc0) / Math.sqrt(variazaC0))\n        setZ0(z0.toFixed(4))\n\n        let hipot = temp > z0 && z0 > -temp ? \"Como el valor Zo cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") no podemos rechazar que los números sean independientes\" :\n            \"Como el valor Zo no cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") podemos concluir que los números no son independientes\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba independencia Corridas Arriba y Abajo Media\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri son independientes</p>\n                        <p>H1: Los numeros del conjunto ri no son independientes</p>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">n</th>\n                                <th scope=\"col\">Co</th>\n                                <th scope=\"col\">n0</th>\n                                <th scope=\"col\">n1</th>\n                                <th scope=\"col\">μCo</th>\n                                <th scope=\"col\">σ2Co</th>\n                                <th scope=\"col\">Zo</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{N}</td>\n                                <td>{C0}</td>\n                                <td>{N0}</td>\n                                <td>{N1}</td>\n                                <td>{MC0}</td>\n                                <td>{VariazaC0}</td>\n                                <td>{Z0}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default CorridaArribaAbajoMedia","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CuadradosMedios = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        setD(seedLength);\n    }, [seed])\n    const constuct = (w, x, y, z) => {\n        return {\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = Math.pow(seed, 2);\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        console.log(middleSeedValues);\n        tempArr.push(constuct(seed, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = Math.pow(tempArr[i - 1].y, 2);\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Cuadrados Medios\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-2' >\n                    <label htmlFor='semilla'>Semilla:</label>\n                    <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <label htmlFor='generar'>Numeros a Generar:</label>\n                    <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <br />\n                    <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                </div>\n            </div><br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Xi^2</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CuadradosMedios","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst ProductosMedios = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [seed2, setSeed2] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        let seed2Length = seed2.toString().length\n        setD(seedLength > seed2Length ? seedLength : seed2Length);\n    }, [seed, seed2])\n    const constuct = (v, w, x, y, z) => {\n        return {\n            v,\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = seed * seed2;\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        tempArr.push(constuct(seed, seed2, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = tempArr[i - 1].w * tempArr[i - 1].y;\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(tempArr[i - 1].w, tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Productos Medios\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla 1:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla 2:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed2} min='100' max='999999' onChange={(e) => setSeed2(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">X1i</th>\n                                <th scope=\"col\">X2i</th>\n                                <th scope=\"col\">X1*X2</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.v}</td>\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProductosMedios","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst MultiplicadorConstante = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [seed2, setSeed2] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        let seed2Length = seed2.toString().length\n        setD(seedLength > seed2Length ? seedLength : seed2Length);\n    }, [seed, seed2])\n    const constuct = (v, w, x, y, z) => {\n        return {\n            v,\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        if (seed.length !== seed2.length) {\n            alert('La semilla y la constante tienen que tener los mismos digitos');\n            return;\n        }\n        let tempArr = [];\n        let seedSquare = seed * seed2;\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        tempArr.push(constuct(seed2, seed, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = seed2 * tempArr[i - 1].y;\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(seed2, tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Multiplicador Constante\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Constante:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed2} min='100' max='999999' onChange={(e) => setSeed2(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Yi</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MultiplicadorConstante","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst Lineal = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [a, setA] = useState(0);\n    let [c, setC] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = ((parseInt(a) * seed) + parseInt(c)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (a * tempArr[i - 1].y + parseInt(c)) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Lineal\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>a:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={a} min='100' max='999999' onChange={(e) => setA(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>c:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={c} min='100' max='999999' onChange={(e) => setC(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>m:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Lineal","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CongruencialMultiplicativo = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [k, setK] = useState(0);\n    let [g, setG] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let a = parseInt(g) + (8 * k);\n        let m = Math.pow(2, g);\n        let tempArr = [];\n        let seedSquare = ((parseInt(a) * seed)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (a * tempArr[i - 1].y) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Multiplicativo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>k:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={k} min='100' max='999999' onChange={(e) => setK(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>g:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={g} min='100' max='999999' onChange={(e) => setG(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialMultiplicativo","import React, { useState, useEffect } from 'react'\nimport { Jumbotron, InputGroup } from 'react-bootstrap'\n\n\nconst CongruencialAditivo = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (w, x, y, z) => {\n        return {\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = seed.split(',');\n\n        if (tempArr.length < 5) {\n            alert('Debes ingresar al menos 5 numeros')\n            return;\n        }\n        let k = tempArr.length - 1\n        let arr = tempArr.map((x) => {\n            return parseInt(x.trim());\n        })\n        tempArr = [];\n        for (let i = 0; i < amount; i++) {\n            let seedSquare = (arr[i + k] + arr[i]) % m;\n            arr.push(seedSquare)\n            tempArr.push(constuct(arr[i + k], arr[i], seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Aditivo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-8' >\n                        <label htmlFor='semilla'>Lista de numeros:</label>\n                        <input id='semilla' value={seed} className=\"form-control\" min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>M:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <div className='btn btn btn-outline-primary' onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xn</th>\n                                <th scope=\"col\">Xn+k</th>\n                                <th scope=\"col\">Xn+1</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialAditivo","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CongruencialCuadratico = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [a, setA] = useState(0);\n    let [b, setB] = useState(0);\n    let [c, setC] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = (((parseInt(a) * (seed * seed)) + (parseInt(b) * parseInt(seed))) + parseInt(c)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (((parseInt(a) * (tempArr[i - 1].y * tempArr[i - 1].y)) + (parseInt(b) * parseInt(tempArr[i - 1].y))) + parseInt(c)) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Cuadratico\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>a:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={a} min='100' max='999999' onChange={(e) => setA(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>b:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={b} min='100' max='999999' onChange={(e) => setB(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>c:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={c} min='100' max='999999' onChange={(e) => setC(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>m:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                </div>\n                <br />\n                <div className=\"row\">\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='ol-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"10%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialCuadratico","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\nconst Medias = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let temp = 0;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = tempArr.reduce((a, b) => {\n            return a + parseFloat(b.trim())\n        }, 0.0) / n;\n        setR((media).toFixed(4));\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n\n        let temp2 = (temp * .01) / (Math.sqrt(12 * n));\n        setLI((.5 - temp2).toFixed(4));\n        setLS((.5 + temp2).toFixed(4));\n\n        let hipot = .5 + temp2 > parseFloat(media) && parseFloat(media) > .5 - temp2 ? \"Como nuestro ṝ, se encuentra dentro de los límites, no se puede rechazar el planteamiento de que el conjunto de números tiene media 0.5\" :\n            \"Como nuestro ṝ, no se encuentra dentro de los límites, se puede rechazar el planteamiento de que el conjunto de números tiene media 0.5\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Medias\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri tienen una media de 0.5</p>\n                        <p>H1: Los numeros del conjunto ri no tienen una media de 0.5</p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">ṝ</th>\n                                <th scope=\"col\">LI</th>\n                                <th scope=\"col\">LS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>µ𝑟𝑖=0.5</td>\n                                <td>µ𝑟𝑖≠0.5</td>\n                                <td>{R}</td>\n                                <td>{LI}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Medias","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\nimport chiSquareInverse from 'inv-chisquare-cdf'\n\nconst Varianza = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = tempArr.reduce((a, b) => {\n            return a + parseFloat(b.trim())\n        }, 0.0) / n;\n\n        let varianza = tempArr.reduce((a, b) => {\n            return a + (Math.pow(parseFloat(b.trim()) - media, 2))\n        }, 0.0) / (n - 1);\n        setR((varianza).toFixed(4));\n        let degreeFreed = n - 1;\n\n        let temp = (12 * (tempArr.length - 1))\n\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n        let tempAlp = 1 - parseFloat(c);\n        let limitInf = (chiSquareInverse.invChiSquareCDF(tempAlp / 2, degreeFreed) / temp).toFixed(4)\n        let limitSup = (chiSquareInverse.invChiSquareCDF((1 - (tempAlp / 2)), degreeFreed) / temp).toFixed(4)\n        setLI(limitInf);\n        setLS(limitSup);\n\n        let hipot = parseFloat(limitSup) > parseFloat(varianza) && parseFloat(varianza) >= parseFloat(limitInf) ? \"Como nuestro σ2𝑟𝑖, se encuentra dentro de los límites, no se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\" :\n            \"Como nuestro σ2𝑟𝑖, no se encuentra dentro de los límites, se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Varianza\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri tienen una varianza de 1/12</p>\n                        <p>H1: Los numeros del conjunto ri no tienen una varianza de 1/12</p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">σ2𝑟𝑖</th>\n                                <th scope=\"col\">LI</th>\n                                <th scope=\"col\">LS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>σ2𝑟𝑖=1/12</td>\n                                <td>σ2𝑟𝑖≠1/12</td>\n                                <td>{R}</td>\n                                <td>{LI}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Varianza","import React, { useState, useEffect } from \"react\";\nimport chiSquareInverse from \"inv-chisquare-cdf\";\nimport { Jumbotron } from 'react-bootstrap'\n\nconst Series = () => {\n    let [cuadrants, setCuadrants] = useState([]);\n    let [c, setC] = useState(0.95);\n    let [m, setM] = useState(0);\n    let [currentNum, setCurrentNum] = useState(\"\");\n    let [numbersCSVString, setNumbersCSVString] = useState(\"\");\n    let [numbers, setNumbers] = useState([]);\n    let [numbersLength, setNumbersLength] = useState(0);\n    let [x2Total, setX2Total] = useState(0);\n    let [acepta, setAcepta] = useState(false);\n    let [testRun, setTestRun] = useState(false);\n    let [oiTotal, setOiTotal] = useState(0);\n    let [eiTotal, setEiTotal] = useState(0);\n    let [alpha, setAlpha] = useState(0.05);\n    let [chiValue, setChiValue] = useState(0);\n    let [testTable, setTestTable] = useState([]);\n\n    useEffect(() => {\n        if (chiValue > x2Total) {\n            setAcepta(true);\n        }\n        if (testTable.length > 0) setTestRun(true);\n    }, [x2Total, chiValue, testTable.length]);\n\n    useEffect(() => {\n        let degreeFreed = m > 2 ? m - 1 : 1;\n        setChiValue(chiSquareInverse.invChiSquareCDF(1 - alpha, degreeFreed));\n    }, [alpha, m]);\n\n    const closestSquareTable = (m) => {\n        let notFound = true;\n        let i = 0;\n        while (notFound) {\n            let ibase2 = Math.pow(i, 2);\n            if (m > ibase2) {\n                i++;\n            } else if (m < ibase2) {\n                m = ibase2;\n                notFound = false;\n            } else if (m == ibase2) {\n                notFound = false;\n            }\n        }\n        return m;\n    };\n\n    const calculateSeriesTest = () => {\n        let nums;\n        let tempNumberlenght;\n        if (parseFloat(c)) {\n            nums = numbersCSVString.split(\",\").map((e) => parseFloat(e));\n            setAlpha(1 - parseFloat(c));\n            setNumbers([...nums]);\n            setNumbersLength(nums.length);\n        } else {\n            alert(\"Ingresa un nivel de confianza mayor a cero\")\n            return;\n        }\n        tempNumberlenght = nums.length;\n\n        if (nums.length > 0) {\n            let divs = Math.sqrt(tempNumberlenght);\n            let tempM = closestSquareTable(divs);\n            console.log(tempM)\n            let coordinates = [];\n\n            setM(tempM);\n            let ei = (tempNumberlenght - 1) / tempM;\n            for (let i = 0; i < tempNumberlenght - 1; i++) {\n                coordinates.push({ xValue: nums[i], yValue: nums[i + 1] });\n            }\n            let base = Math.sqrt(tempM);\n            let coordX = 0;\n            let coordY = 0;\n            let range = 1 / base;\n            let tableCuadrnts = [];\n            for (let i = 0; i < base; i++) {\n                for (let j = 0; j < base; j++) {\n                    tableCuadrnts.push({\n                        lowerX: coordX,\n                        higherX: coordX + range,\n                        lowerY: coordY,\n                        higherY: coordY + range,\n                    });\n                    coordX += range;\n                }\n                coordY += range;\n                coordX = 0;\n            }\n            setCuadrants(tableCuadrnts);\n            console.log(tableCuadrnts)\n\n            let ammountByCuadrant = [];\n            for (let i = 0; i < tableCuadrnts.length; i++) {\n                for (let j = 0; j < coordinates.length; j++) {\n                    if (\n                        coordinates[j].xValue > tableCuadrnts[i].lowerX &&\n                        coordinates[j].xValue < tableCuadrnts[i].higherX &&\n                        coordinates[j].yValue > tableCuadrnts[i].lowerY &&\n                        coordinates[j].yValue < tableCuadrnts[i].higherY\n                    ) {\n                        ammountByCuadrant.push(i);\n                    }\n                }\n            }\n\n            let tempOi = new Array(tableCuadrnts.length).fill(0);\n\n            for (let i = 0; i < ammountByCuadrant.length; i++) {\n                tempOi[ammountByCuadrant[i]]++;\n            }\n\n            let tempx2Vals = [];\n            let tempx2TotalVal = 0;\n            let oitotal = 0;\n            let eitotal = ei * tempM;\n            for (let i = 0; i < tempM; i++) {\n                oitotal += tempOi[i];\n                tempx2Vals[i] = parseFloat(Math.pow(ei - tempOi[i], 2) / ei);\n                tempx2TotalVal += tempx2Vals[i];\n            }\n            setX2Total(tempx2TotalVal);\n            setOiTotal(oitotal);\n            setEiTotal(eitotal)\n\n            let tempTestTable = [];\n            for (let i = 0; i < tableCuadrnts.length; i++) {\n                tempTestTable.push({\n                    interval: i + 1,\n                    oi: tempOi[i],\n                    ei: ei,\n                    x2: tempx2Vals[i],\n                });\n            }\n            setTestTable(tempTestTable);\n        }\n    };\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Series\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className=\"form-group\">\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <label for=\"semilla\">Nivel de cofianza:</label>\n                        <input id=\"semilla\" type=\"number\" value={c} className=\"form-control\" onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-8'>\n                        <p>H0: Los numeros del conjunto ri son independientes</p>\n                        <p>H1: Los numeros del conjunto ri no son independientes</p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <label for=\"csv\">Numeros:</label>\n                        <textarea id=\"csv\" type=\"text\" value={numbersCSVString} className=\"form-control\" rows=\"4\" onChange={(e) => setNumbersCSVString(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => calculateSeriesTest()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className=\"row\">\n                <div className='col-12'>\n                    <table className='table text-center'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">X^2 Tabla</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            <tr scope=\"row\">\n                                <td><b>{chiValue != 0 ? chiValue.toFixed(4) : 0}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Intervalo</th>\n                                <th scope=\"col\">Oi</th>\n                                <th scope=\"col\">Ei = n-1/m</th>\n                                <th scope=\"col\">(Ei-Oi)^2/Ei</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {testTable.map((e) => {\n                                {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.interval}</td>\n                                            <td>{e.oi}</td>\n                                            <td>{e.ei.toFixed(2)}</td>\n                                            <td>{e.x2.toFixed(4)}</td>\n                                        </tr>\n                                    );\n                                }\n                            })}\n                            <tr scope=\"row\">\n                                <td>Total</td>\n                                <td>{oiTotal}</td>\n                                <td>{eiTotal}</td>\n                                <td><b>{x2Total != 0 ? x2Total.toFixed(4) : 0}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (testRun) {\n                            if (acepta) {\n                                return (<Jumbotron>\n                                    <p className=\"text-center\">Como el valor X^2 calculado es menor a X^2 de la tabla, no podemos rechazar que los números son independientes</p>\n                                </Jumbotron>)\n                            }\n                            return (<Jumbotron>\n                                <p className=\"text-center\">Como el valor X^2 calculado es mayor a X^2 de la tabla, podemos rechazar que los números son independientes</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Series;\n","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\nconst CorridaArribaAbajo = () => {\n    let [numeros, setNumeros] = useState('');\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [N, setN] = useState(0);\n    let [C0, setC0] = useState(0);\n    let [MC0, setMC0] = useState(0);\n    let [VariazaC0, setVariazaC0] = useState(0);\n    let [Z0, setZ0] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let countSwitch = 0;\n        let swithFlag = 0;\n\n        let temp;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            console.log(val)\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        console.log(temp, 1 - ((1 - parseFloat(c)) / 2), (1 - parseFloat(c)).toFixed(2))\n\n        for (let index = 1; index < n; index++) {\n            let temp = tempArr[index] <= tempArr[index - 1] ? 0 : 1\n            if (temp != swithFlag) {\n                countSwitch++;\n                swithFlag = !swithFlag;\n            }\n        }\n\n        setC0(countSwitch)\n        let mc0 = ((2 * n - 1) / 3);\n        setMC0(mc0.toFixed(4));\n\n        let variazaC0 = ((16 * n - 29) / 90)\n        setVariazaC0(variazaC0.toFixed(4))\n\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n        temp = (temp * .01).toFixed(2);\n        let z0 = Math.abs((countSwitch - mc0) / Math.sqrt(variazaC0))\n        setZ0(z0.toFixed(4))\n\n        let hipot = temp > z0 && z0 > -temp ? \"Como el valor Zo cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") no podemos rechazar que los números sean independientes\" :\n            \"Como el valor Zo no cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") podemos concluir que los números no son independientes\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba independencia Corridas Arriba y Abajo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri son independientes</p>\n                        <p>H1: Los numeros del conjunto ri no son independientes</p>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">n</th>\n                                <th scope=\"col\">Co</th>\n                                <th scope=\"col\">μCo</th>\n                                <th scope=\"col\">σ2Co</th>\n                                <th scope=\"col\">Zo</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{N}</td>\n                                <td>{C0}</td>\n                                <td>{MC0}</td>\n                                <td>{VariazaC0}</td>\n                                <td>{Z0}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default CorridaArribaAbajo","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\nconst Kolmogorov = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [Dmas, setDmas] = useState(0);\n    let [Dmenos, setDmenos] = useState(0);\n    let [Dna, setDna] = useState(0);\n    let [D, setD] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n\n        if (n > 20) {\n            alert('La prueba no se puede realizar con mas de 20 numeros')\n            return;\n        }\n\n        tempArr.sort((a, b) => parseFloat(a) - parseFloat(b));\n        let arr1 = [];\n        let arr3 = [];\n        let arr4 = [];\n        let arr5 = [];\n        for (let i = 0; i < n; i++) {\n            arr1[i] = (i + 1) / n;\n            arr3[i] = i / n;\n            arr4[i] = parseFloat(\n                (arr1[i] - tempArr[i]).toFixed(4)\n            );\n            arr5[i] = parseFloat(\n                (tempArr[i] - arr3[i]).toFixed(4)\n            );\n        }\n        let table = [];\n        table[0] = [0.995, 0.99, 0.975, 0.95, 0.9];\n        table[1] = [0.9293, 0.9, 0.8418, 0.7763, 0.6837];\n        table[2] = [0.829, 0.7845, 0.7076, 0.636, 0.5648];\n        table[3] = [0.7342, 0.6888, 0.6239, 0.5652, 0.4926];\n        table[4] = [0.6685, 0.6271, 0.5632, 0.5094, 0.4469];\n        table[5] = [0.6166, 0.5774, 0.5192, 0.4679, 0.4103];\n        table[6] = [0.5758, 0.5384, 0.4834, 0.436, 0.3814];\n        table[7] = [0.5418, 0.5065, 0.4542, 0.4096, 0.3582];\n        table[8] = [0.5133, 0.4796, 0.43, 0.3874, 0.339];\n        table[9] = [0.4889, 0.4566, 0.4092, 0.3686, 0.3225];\n        table[10] = [0.4677, 0.4367, 0.3912, 0.3524, 0.3082];\n        table[11] = [0.449, 0.4191, 0.3754, 0.3381, 0.2957];\n        table[12] = [0.4324, 0.4036, 0.3614, 0.3254, 0.2846];\n        table[13] = [0.4176, 0.3897, 0.3448, 0.3141, 0.2747];\n        table[14] = [0.4042, 0.3771, 0.3376, 0.3039, 0.2658];\n        table[15] = [0.392, 0.3657, 0.3283, 0.2947, 0.2577];\n        table[16] = [0.3808, 0.3552, 0.3179, 0.2862, 0.2503];\n        table[17] = [0.3706, 0.3456, 0.3093, 0.2785, 0.2435];\n        table[18] = [0.3611, 0.3368, 0.3014, 0.2713, 0.2435];\n        table[19] = [0.3524, 0.3286, 0.294, 0.2647, 0.2315];\n\n        let d_max = Math.max(...arr4);\n        let d_min = Math.abs(Math.min(...arr5));\n        setDmas(d_max);\n        setDmenos(d_min)\n\n\n\n        let d_value = d_max > d_min ? d_max : d_min;\n        let tempAlp = (1 - parseFloat(c)).toFixed(2);\n\n        setAlpha(tempAlp)\n        let d_table;\n\n\n        switch (parseFloat(tempAlp)) {\n            case 0.01:\n                d_table = table[n - 1][0];\n                break;\n            case 0.02:\n                d_table = table[n - 1][1];\n                break;\n            case 0.05:\n                d_table = table[n - 1][2];\n                break;\n            case 0.1:\n                d_table = table[n - 1][3];\n                break;\n            case 0.2:\n                d_table = table[n - 1][4];\n                break;\n            default:\n                d_table = 0;\n                break;\n        }\n\n        setDna(d_table)\n        setD(d_value)\n        let hipot = d_table > d_value ? 'Como D α,𝑛 > D no se puede rechazar que los números se distribuyen uniformemente' :\n            'Como D α,𝑛 < D se puede rechazar que los números se distribuyen uniformemente'\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba Uniformidad Kolmogorov-Smirnov\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal (.95, .99, .90, .98, .80)</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri son uniformes</p>\n                        <p>H1: Los numeros del conjunto ri no son uniformes</p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">D+</th>\n                                <th scope=\"col\">D-</th>\n                                <th scope=\"col\">D</th>\n                                <th scope=\"col\">Da,n</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>{Dmas}</td>\n                                <td>{Dmenos}</td>\n                                <td>{D}</td>\n                                <td>{Dna}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Kolmogorov","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\nimport chiSquareInverse from 'inv-chisquare-cdf'\n\nconst ChiCuadrada = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n    let [resultList, setResultList] = useState([]);\n\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let m = (Math.pow(n, .5));\n\n        tempArr.sort((a, b) => parseFloat(a) - parseFloat(b));\n\n        let low = 0;\n        let hight = 1;\n        let ei = n / m;\n        let index = 0\n        let countList = []\n        let interval = 1 / Math.round(m);\n        let count = 0;\n        tempArr.forEach(element => {\n            let tempElemet = parseFloat(element)\n            if (tempElemet > (low * interval) && tempElemet <= (hight * interval)) {\n                count++\n            } else {\n                low++;\n                hight++;\n                countList[index] = count;\n                count = 1;\n                index++;\n            }\n        });\n        countList[index] = count;\n\n        let finalList = [];\n\n        countList.forEach(element => {\n            finalList.push({\n                oi: element,\n                ei: ei,\n                result: (Math.pow(ei - element, 2)) / ei\n            })\n        });\n\n        setResultList(finalList)\n        let tempr = finalList.reduce((a, b) => {\n            return a + parseFloat(b.result);\n        }, 0.0).toFixed(2)\n        setR(tempr);\n        let tempAlp = (1 - parseFloat(c)).toFixed(2);\n        let degreeFreed = m > 2 ? m - 1 : 1;\n        let tempchi = chiSquareInverse.invChiSquareCDF(1 - tempAlp, degreeFreed).toFixed(2);\n        setLS(tempchi);\n\n        let hipot = parseFloat(tempr) < parseFloat(tempchi) ? \"Como nuestro estadístico calculado es menor a nuestro estadístico de las tablas, no podemos rechazar que nuestros números sigan una distribución uniforme continua\" :\n            \"Como nuestro estadístico calculado es mayor a nuestro estadístico de las tablas,  podemos rechazar que nuestros números siguen una distribución uniforme continua\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Uniformidad Chi cuadrada\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-10'>\n                        <p>H0: Los numeros del conjunto ri son uniformes</p>\n                        <p>H1: Los numeros del conjunto ri no son uniformes</p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Oi</th>\n                                <th scope=\"col\">EI</th>\n                                <th scope=\"col\">(𝑬𝒊 −𝑶𝒊)𝟐/𝑬𝒊</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                resultList.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.oi}</td>\n                                            <td>{e.ei}</td>\n                                            <td>{e.result}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">H0</th>\n                                <th scope=\"col\">H1</th>\n                                <th scope=\"col\">𝑋2^</th>\n                                <th scope=\"col\">𝑋^2 a,m</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr scope=\"row\">\n                                <td>ri son uniformes</td>\n                                <td>ri no son uniformes</td>\n                                <td>{R}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (Hipot !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{Hipot}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default ChiCuadrada","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\nimport exponencial from '../imgs/exponencial.png';\nimport uniforme from '../imgs/uniforme.png';\nimport poisson from '../imgs/poisson.png';\nimport bernoulli from '../imgs/bernoulli.png';\n\nfunction fac(n) {\n    return (n < 2) ? 1 : fac(n - 1) * n;\n}\n\nconst TransformadaInversa = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState('1');\n    let [amount, setAmount] = useState(0);\n    let [a, setA] = useState(0);\n    let [b, setB] = useState(0);\n    let [lamda, setLamda] = useState(0);\n    let [media, setMedia] = useState(0);\n    let [mediaPiezas, setMediaPiezas] = useState(0);\n    let [probaPiezas, setProbaPiezas] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    useEffect(() => {\n        setGeneratedNums([])\n        setAmount(0)\n    }, [seed])\n\n\n    const generateNums = () => {\n        let nums = [];\n        switch (seed) {\n            case '1':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        pos: index + 1,\n                        r: random.toFixed(3),\n                        x: (parseFloat(a) + ((parseFloat(b) - parseFloat(a)) * random)).toFixed(3)\n                    })\n\n                }\n                setGeneratedNums(nums);\n                break;\n            case '2':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        pos: index + 1,\n                        r: random.toFixed(2),\n                        x: (-Math.log(1 - random) * (1 / lamda)).toFixed(2)\n                    })\n                }\n                setGeneratedNums(nums);\n                break;\n            case '3':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        pos: index + 1,\n                        r: random.toFixed(2),\n                        x: random > (1 - media) ? 1 : 0\n                    })\n                }\n                setGeneratedNums(nums);\n                break;\n            case '4':\n                let probs = [];\n                for (let index = 0; index < probaPiezas; index++) {\n                    let prob = (Math.pow(mediaPiezas, index) * (Math.pow(Math.E, -mediaPiezas))) / fac(index)\n                    probs.push(prob)\n                }\n\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n\n                    let piezas = 0;\n                    let acumulado = 0;\n                    for (let index2 = 0; index2 < probs.length; index2++) {\n                        if (probs[index2] + acumulado > random) {\n                            piezas = index2;\n                            break;\n                        } else {\n                            acumulado += probs[index2];\n                        }\n                    }\n                    nums.push({\n                        pos: index + 1,\n                        r: random.toFixed(2),\n                        x: piezas\n                    })\n\n                }\n                setGeneratedNums(nums);\n                break;\n\n\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Método Transformada Inversa\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-3' >\n                    <label htmlFor='semilla'>Distribución:</label>\n                    <select d='semilla' className=\"form-control\" value={seed} onChange={(e) => setSeed(e.target.value)}>\n                        <option value=\"1\" >Distribución Uniforme</option>\n                        <option value=\"2\" >Distribución Exponencial</option>\n                        <option value=\"3\" >Distribución Bernoulli</option>\n                        <option value=\"4\" >Distribución Poisson</option>\n                        <option value=\"5\" >Distribución Normal</option>\n                    </select>\n                </div>\n                <div className='col-2'>\n                    <label htmlFor='generar'>Numeros a Generar:</label>\n                    <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <br />\n                    <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                </div>\n                <div className='col-2'>\n                    {(() => {\n                        if (seed == '1') {\n                            return <p >Formula Uniforme:</p>;\n                        }\n                        if (seed == '2') {\n                            return <p>Formula Exponencial:</p>;\n                        }\n                        if (seed == '3') {\n                            return <p>Formula Bernoulli:</p>;\n                        }\n                        if (seed == '4') {\n                            return <p>Formula Poisson:</p>;\n                        }\n                    })()}\n\n                </div>\n                <div className='col-2'>\n                    {(() => {\n                        if (seed == '1') {\n                            return <img src={uniforme} alt=\"Logo\" />\n                        }\n                        if (seed == '2') {\n                            return <img src={exponencial} alt=\"Logo\" />\n                        }\n                        if (seed == '3') {\n                            return <img src={bernoulli} alt=\"Logo\" />\n                        }\n                        if (seed == '4') {\n                            return <img src={poisson} alt=\"Logo\" />\n                        }\n                    })()}\n\n                </div>\n            </div><br />\n            {(() => {\n                switch (seed) {\n                    case '1':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>a:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={a} onChange={(e) => setA(e.target.value)} />\n                            </div>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>b:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={b} onChange={(e) => setB(e.target.value)} />\n                            </div>\n                        </div>\n                    case '2':\n                        return <div className='row'>\n                            <div className='col-3'>\n                                <label htmlFor='generar'>𝜆:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={lamda} onChange={(e) => setLamda(e.target.value)} />\n                                <p><small>Ingresa la media en formato decimal</small></p>\n                                <p><small>Ej. 3 min/cliente = 0.3334</small></p>\n                            </div>\n                        </div>\n                    case '3':\n                        return <div className='row'>\n                            <div className='col-3'>\n                                <label htmlFor='generar'>Posibilidad de fallo:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={media} onChange={(e) => setMedia(e.target.value)} />\n                                <p><small>Ingresa la posibilidad en formato decimal</small></p>\n                            </div>\n                        </div>\n                    case '4':\n                        return <div className='row'>\n                            <div className='col-3'>\n                                <label htmlFor='generar'>Media:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={mediaPiezas} onChange={(e) => setMediaPiezas(e.target.value)} />\n                                <p><small>Ingresa la media en formato decimal</small></p>\n                                <p><small>Ej. 2 pz/hr = 2</small></p>\n                            </div>\n                            <div className='col-3'>\n                                <label htmlFor='generar'>Numero de Probabilidad:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={probaPiezas} onChange={(e) => setProbaPiezas(e.target.value)} />\n                                <p><small>Ej. Probabilidad de Piezas</small></p>\n                            </div>\n                        </div>\n\n                    default:\n                        return null;\n                }\n            })()}\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">ri</th>\n                                <th scope=\"col\">Xi</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.pos}</td>\n                                            <td>{e.r}</td>\n                                            <td>{e.x}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TransformadaInversa","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { Fragment } from 'react'\nimport erlang from '../imgs/erlang.png';\nimport normal from '../imgs/normalConv.png';\nimport bino from '../imgs/binomial.png';\n\n\nfunction fac(n) {\n    return (n < 2) ? 1 : fac(n - 1) * n;\n}\n\nconst Convolucion = () => {\n    let [seed, setSeed] = useState('1');\n    let [amount, setAmount] = useState(0);\n    let [a, setA] = useState(0);\n    let [b, setB] = useState(0);\n    let [media, setMedia] = useState(0);\n    let [mediaPiezas, setMediaPiezas] = useState(0);\n    let [probaPiezas, setProbaPiezas] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    let [numeros, setNumeros] = useState('');\n\n    useEffect(() => {\n        setGeneratedNums([])\n        setAmount(0)\n    }, [seed])\n\n\n    const generateNums = () => {\n        let nums = [];\n        switch (seed) {\n            case '1':\n                let temmp = [];\n                for (let i = 0; i < a; i++) {\n                    temmp[i] = [];\n                    for (let e = 0; e < amount; e++) {\n                        temmp[i][e] = (Math.random())\n                    }\n                }\n                let multi = 1;\n                for (let i = 0; i < amount; i++) {\n                    let count = [];\n                    for (let j = 0; j < a; j++) {\n                        count.push((1 - temmp[j][i]).toFixed(2))\n                        multi *= 1 - temmp[j][i];\n                    }\n                    let value = ((-b / a) * Math.log(multi)).toFixed(3);\n\n                    nums[i] = {\n                        pos: i + 1,\n                        nums: count,\n                        r: multi,\n                        x: value\n                    };\n                    multi = 1;\n                }\n                setGeneratedNums(nums);\n                break;\n            case '2':\n                let tempArr = numeros.split(',');\n                let n = tempArr.length\n                let cont = 0;\n                let tope2 = n / amount;\n                if (tope2 % 1 != 0) {\n                    alert('Las division en entre el total de numeros a generar y el total de numeros ingresados no es un entero')\n                    return;\n                }\n                for (let index = 1; index <= amount; index++) {\n                    let tot = 0\n                    for (let index2 = 0; index2 < tope2; index2++) {\n                        tot += parseFloat(tempArr[index2 + cont])\n                    }\n                    nums.push({\n                        num: index,\n                        r: tot.toFixed(4),\n                        r6: (tot - 6).toFixed(4),\n                        n: ((tot - 6) + parseFloat(probaPiezas) + parseFloat(mediaPiezas)).toFixed(4)\n                    })\n                    cont += tope2;\n                }\n\n                setGeneratedNums(nums);\n                break;\n            case '3':\n                for (let index = 1; index <= amount; index++) {\n                    let tempNums = [];\n                    let count = 0;\n                    for (let index2 = 0; index2 < amount; index2++) {\n                        let random = Math.random()\n                        let res = random > (1 - media) ? 1 : 0\n                        tempNums[index2] = {\n                            r: random.toFixed(2),\n                            be: res\n                        };\n                        if (res) {\n                            count++;\n                        }\n                    }\n                    nums[index - 1] = {\n                        pos: index,\n                        nums: tempNums,\n                        x: count\n                    };\n                }\n                setGeneratedNums(nums);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Método de Convolucion\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-3' >\n                    <label htmlFor='semilla'>Distribución:</label>\n                    <select d='semilla' className=\"form-control\" value={seed} onChange={(e) => { setGeneratedNums([]); setSeed(e.target.value) }}>\n                        <option value=\"1\" >Distribución Erlana</option>\n                        <option value=\"2\" >Distribución Normal</option>\n                        <option value=\"3\" >Distribución Binomial</option>\n                    </select>\n                </div>\n                <div className='col-2'>\n                    {(() => {\n                        if (seed == '3') {\n                            return <label htmlFor='generar'>Tamaño del Lote:</label>;\n                        }\n                        if (seed == '1') {\n                            return <label htmlFor='generar'>Numero de Piezas:</label>;\n                        }\n                        return <label htmlFor='generar'>Variables a Generar:</label>\n                    })()}\n\n                    <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <br />\n                    <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                </div>\n\n                <div className='col-2'>\n                    {(() => {\n                        if (seed == '1') {\n                            return <p >Formula Earl:</p>;\n                        }\n                        if (seed == '2') {\n                            return <p>Formula Norml:</p>;\n                        }\n                        return <p>Formula Binom:</p>;\n                    })()}\n\n                </div>\n                <div className='col-2'>\n                    {(() => {\n                        if (seed == '1') {\n                            return <img src={erlang} alt=\"Logo\" />\n                        }\n                        if (seed == '2') {\n                            return <img src={normal} alt=\"Logo\" />\n                        }\n                        return <img src={bino} alt=\"Logo\" />\n                    })()}\n\n                </div>\n            </div><br />\n            {(() => {\n                switch (seed) {\n                    case '1':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Erlang:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={a} onChange={(e) => setA(e.target.value)} />\n                            </div>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Media:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={b} onChange={(e) => setB(e.target.value)} />\n                            </div>\n                        </div>\n                    case '2':\n                        return <Fragment>\n                            <div className='row'>\n                                <div className='col-2'>\n                                    <label htmlFor='generar'>Media:</label>\n                                    <input id='generar' type='number' className=\"form-control\" value={mediaPiezas} onChange={(e) => setMediaPiezas(e.target.value)} />\n                                </div>\n                                <div className='col-2'>\n                                    <label htmlFor='generar'>Desviacion Estandar:</label>\n                                    <input id='generar' type='number' className=\"form-control\" value={probaPiezas} onChange={(e) => setProbaPiezas(e.target.value)} />\n                                </div>\n                            </div>\n                            <div className='row'>\n                                <div className='col-12' >\n                                    <label htmlFor='numeros'>Numeros:</label>\n                                    <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                                    <p><small>Ingresa los numeros separados por comas</small></p>\n                                </div>\n                            </div>\n                        </Fragment>\n                    case '3':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Probabilidad Def:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={media} onChange={(e) => setMedia(e.target.value)} />\n                            </div>\n                        </div>\n                    default:\n                        return null;\n                }\n            })()}\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                {(() => {\n                                    if (seed == '3') {\n                                        if (generatedNums.length > 0) {\n                                            let count = 0;\n                                            return <Fragment>\n                                                <th scope=\"col\">#</th>\n                                                {\n                                                    generatedNums[0].nums.map((e) => {\n                                                        count++;\n                                                        return (\n                                                            <Fragment>\n                                                                <th scope=\"col\">{\"R\" + count}</th>\n                                                                <th scope=\"col\">{\"BE\" + count}</th>\n                                                            </Fragment>\n                                                        )\n                                                    })\n                                                }\n                                                <th scope=\"col\">#Dif</th>\n                                            </Fragment>\n                                        }\n                                        return <Fragment><th scope=\"col\">Lote</th><th scope=\"col\">#Dif</th></Fragment>\n                                    }\n\n                                    if (seed == '1') {\n                                        if (generatedNums.length > 0) {\n                                            return <Fragment>\n                                                <th scope=\"col\">#</th>\n                                                {\n                                                    generatedNums[0].nums.map((e) => {\n                                                        return (<th scope=\"col\">1 - ri</th>)\n                                                    })\n                                                }\n                                                <th scope=\"col\">Min / Pieza</th>\n                                            </Fragment>\n                                        }\n                                        return <Fragment><th scope=\"col\">#</th><th scope=\"col\">Min / Pieza</th></Fragment>\n                                    }\n                                    return <Fragment><th scope=\"col\">#</th><th scope=\"col\">Suma ri</th><th scope=\"col\">Suma ri - 6</th><th scope=\"col\">Ni</th></Fragment>\n                                })()}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    if (seed == '1') {\n                                        return (\n                                            <tr scope=\"row\">\n                                                <td>{e.pos}</td>\n                                                <Fragment>\n                                                    {e.nums.map((num) => {\n                                                        return <td>{num}</td>\n                                                    })}\n                                                </Fragment>\n                                                <td>{e.x}</td>\n                                            </tr>\n                                        )\n                                    }\n                                    if (seed == '2') {\n                                        return (\n                                            <tr scope=\"row\">\n                                                <td>{e.num}</td>\n                                                <td>{e.r}</td>\n                                                <td>{e.r6}</td>\n                                                <td>{e.n}</td>\n                                            </tr>\n                                        )\n                                    }\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.pos}</td>\n                                            <Fragment>\n                                                {e.nums.map((num) => {\n                                                    return <Fragment>\n                                                        <td>{num.r}</td>\n                                                        <td>{num.be}</td>\n                                                    </Fragment>\n                                                })}\n                                            </Fragment>\n                                            <td>{e.x}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Convolucion","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\nconst Huecos = () => {\n    let [rawList, setRawList] = useState(\"\");\n    let [minInter, setMinInter] = useState(0.5);\n    let [maxInter, setMaxInter] = useState(1);\n    let [table, setTable] = useState([]);\n    let [H, setH] = useState(0);\n    let [estTotal, setEstTotal] = useState(0)\n    let [display, setDisplay] = useState(false);\n    const X2 = 11.07\n\n    const calculate = () => {\n        let list = inputToList()\n        let normList = normalizeList(list)\n        let table = fillTable(normList)\n\n        setTable(table)\n        setDisplay(true)\n    }\n\n    const inputToList = () => {\n        let cleanedList = rawList.split(',').map((x) => {\n            return x.trim()\n        })\n        return cleanedList\n    }\n\n    // agrega 1 si el numero esta dentro de los intervalos, 0 si no\n    const normalizeList = (list) => {\n        let newList = []\n        list.forEach((x) => {\n            if (minInter <= x && x <= maxInter) {\n                newList.push(1)\n            } else {\n                newList.push(0)\n            }\n        })\n        return newList\n    }\n\n    // llama a todos los metodos necesarios para llenar la tabla\n    const fillTable = (list) => {\n        let { firstTable, H } = getOi(list)\n        setH(H)\n        let table = getEi(firstTable, H)\n        return getEstadistico(table)\n    }\n\n    // cuenta los hoyos con un tamaño dado\n    const getOi = (list) => {\n        console.log(list)\n        let firstOne = list.indexOf(1)\n        let H = 0\n        let table = [\n            { i: 0, oi: 0, ei: 0, f: 0 },\n            { i: 1, oi: 0, ei: 0, f: 0 },\n            { i: 2, oi: 0, ei: 0, f: 0 },\n            { i: 3, oi: 0, ei: 0, f: 0 },\n            { i: 4, oi: 0, ei: 0, f: 0 },\n            { i: 5, oi: 0, ei: 0, f: 0 }\n        ]\n        for (let h = 0; h <= 5; h++) {\n            let holes = 0\n            for (let i = firstOne; i < list.length - 1; i++) {\n                for (let k = i + 1; k < list.length; k++) {\n                    if (list[k] === 1) {\n                        if (list[i] === list[k]) {\n                            if (h === holes) {\n                                table[h].oi += 1\n                                H++\n                            } else if (h === 5 && holes >= 5) {\n                                table[h].oi += 1\n                                H++\n                            }\n                            i = k\n                        }\n                        holes = 0\n                    } else {\n                        holes++\n                    }\n\n                }\n            }\n        }\n        return { firstTable: table, H: H }\n    }\n\n    // set values for the EI column\n    const getEi = (table, H) => {\n        table.forEach((obj) => {\n            obj.ei = H * (maxInter - minInter) * Math.pow((1 - (maxInter - minInter)), obj.i)\n        })\n        return table\n    }\n\n    // set values for the Last column\n    const getEstadistico = (table) => {\n        let total = 0\n        table.forEach((obj) => {\n            obj.f = Math.pow((obj.ei - obj.oi), 2) / obj.ei\n            total += obj.f\n        })\n        setEstTotal(total)\n        return table\n    }\n\n    const getResultMessage = () => {\n        if (display) {\n            if (estTotal < X2) {\n                return \"Debido a que X^2 calculada es menor a X^2 de la tabla, no se puede rechazar que los números son independientes\"\n            } else {\n                return \"Debido a que X^2 calculada es mayor a X^2 de la tabla, se puede rechazar que los números son independientes\"\n            }\n        }\n        return '';\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Huecos\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <label htmlFor='intervalo0'>Intervalo alpha:</label>\n                        <input id='intervalo0' type='number' className=\"form-control\" value={minInter} min='0' max='1' onChange={(e) => setMinInter(e.target.value * 1)} />\n                    </div>\n                    <div className=\"col-2\">\n                        <label htmlFor='interval1'>Intervalo beta:</label>\n                        <input id='intervalo1' type='number' className=\"form-control\" value={maxInter} min='0' max='1' onChange={(e) => setMaxInter(e.target.value * 1)} />\n                    </div>\n                    <div className='col-8'>\n                        <p>H0: Los numeros del conjunto ri son independientes</p>\n                        <p>H1: Los numeros del conjunto ri no son independientes</p>\n                    </div>\n                </div>\n                <p>Nivel de confianza: 95%</p>\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='list' className=\"form-control\" rows=\"4\" onChange={(e) => setRawList(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n                <div className='row text-right'>\n                    <div className='col-12'>\n                        <div className='btn btn-outline-primary' onClick={(e) => calculate()}>Correr Prueba</div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"row\">\n                <div className='col-12'>\n                    <table className='table text-center'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">X^2 Tabla</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            <tr scope=\"row\">\n                                <td><b>{X2}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <table className='table text-center'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">i</th>\n                                <th scope=\"col\">Oi</th>\n                                <th scope=\"col\">Ei</th>\n                                <th scope=\"col\">X^2</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                table.map((e) => {\n                                    return (\n                                        <tr scope=\"row\" key={e.i}>\n                                            <td>{e.i}</td>\n                                            <td>{e.oi}</td>\n                                            <td>{e.ei.toFixed(4)}</td>\n                                            <td>{e.f.toFixed(4)}</td>\n                                        </tr>\n                                    )\n                                })\n                            }\n                            <tr scope=\"row\">\n                                <td>Total</td>\n                                <td>H={H}</td>\n                                <td>H={H}</td>\n                                <td><b>{estTotal != 0 ? estTotal.toFixed(4) : 0}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                    <br />\n                    {(() => {\n                        if (getResultMessage() !== '') {\n                            return (<Jumbotron>\n                                <p className=\"text-center\">{getResultMessage()}</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Huecos","import React, { useState } from \"react\";\nimport chiSquareInverse from \"inv-chisquare-cdf\";\nimport { Jumbotron } from 'react-bootstrap'\n\nconst PruebaPoker = () => {\n    let [numbers, setNums] = useState([]);\n    let [c, setC] = useState(0.95);\n    let [numbersCSVString, setNumbersCSVString] = useState(\"\");\n    let [testRun, setTestRun] = useState(false);\n    let [disable, setDisable] = useState(true);\n    let [fillAlpha, setFillAlpa] = useState(false);\n    let [numlist, setnumList] = useState([]);\n    let [numbersLength, setNumbersLength] = useState(0);\n\n    const [categories, setCategories] = useState({\n        todoDif: 0,\n        unPar: 0,\n        dosPares: 0,\n        unaTercia: 0,\n        terciaPar: 0,\n        poker: 0,\n        quintilla: 0\n    });\n    const [ei, setEi] = useState({\n        todoDif: 0,\n        unPar: 0,\n        dosPares: 0,\n        unaTercia: 0,\n        terciaPar: 0,\n        poker: 0,\n        quintilla: 0\n    });\n    const [eiOi, setEiOi] = useState({\n        todoDif: 0,\n        unPar: 0,\n        dosPares: 0,\n        unaTercia: 0,\n        terciaPar: 0,\n        poker: 0,\n        quintilla: 0,\n        total: 0\n    });\n\n    const [x20, setx20] = useState(\"\");\n    const [chi2, setChi2] = useState(0);\n\n    const class5D = [\"TD\", \"1P\", \"2P\", \"1T\", \"TP\", \"P\", \"Q\"];\n    const prob5D = [0.3024, 0.504, 0.108, 0.009, 0.072, 0.0045, 0.0001];\n\n    const class3D = [\"TD\", \"1P\", \"T\"];\n    const prob3D = [0.72, 0.27, 0.01];\n\n    const class4D = [\"TD\", \"1P\", \"2P\", \"1T\", \"P\"];\n    const prob4D = [0.504, 0.432, 0.027, 0.036, 0.001];\n\n    const solve5D = () => {\n        let numberList = numbersCSVString.split(\",\");\n        setnumList(numberList);\n        let noNewLine = numberList.map((x) => x.replace(/(\\r\\n|\\n|\\r)/gm, \"\"));\n\n        var noDot = noNewLine.map((s) => s.substring(2));\n        var sorted = noDot.map((x) => {\n            let arr = x.split(\"\");\n            let sorted = arr.sort((a, b) => a - b);\n            let joinArr = sorted.join(\"\");\n\n            return joinArr;\n        });\n\n        let alpha = (1 - parseFloat(c))\n\n        setNums(sorted);\n        setNumbersLength(sorted.length)\n\n        let nums = sorted;\n\n        let tempCat;\n        let todoDif = 0;\n        let unPar = 0;\n        let dosPar = 0;\n        let unaTercia = 0;\n        let terciaPar = 0;\n        let poker = 0;\n        let quintilla = 0;\n\n        if (nums[0].length === 5) {\n            let arr = nums.map((str) => {\n                let first = str.split(str[0]).length - 1;\n                let second = str.split(str[1]).length - 1;\n                let third = str.split(str[2]).length - 1;\n                let fourth = str.split(str[3]).length - 1;\n                let fifth = str.split(str[4]).length - 1;\n\n                let all = [];\n                all.push(first);\n                all.push(second);\n                all.push(third);\n                all.push(fourth);\n                all.push(fifth);\n\n                if (all.includes(5)) {\n                    quintilla++;\n                } else if (all.includes(3) && all.includes(2)) {\n                    terciaPar++;\n                } else if (all.includes(2) && all.includes(1)) {\n                    let count = 0;\n                    for (let i = 0; i < all.length; i++) {\n                        if (all[i] === 2) {\n                            count++;\n                        }\n                    }\n                    if (count === 4) {\n                        dosPar++;\n                    } else {\n                        unPar++;\n                    }\n                } else if (all.includes(4)) {\n                    poker++;\n                } else if (all.includes(3) && all.includes(1)) {\n                    unaTercia++;\n                } else {\n                    todoDif++;\n                }\n            });\n            tempCat = {\n                todoDif: todoDif,\n                unPar: unPar,\n                dosPares: dosPar,\n                unaTercia: unaTercia,\n                terciaPar: terciaPar,\n                poker: poker,\n                quintilla: quintilla,\n            };\n            setCategories(tempCat);\n        } else if (nums[0].length === 4) {\n            let arr = nums.map((str) => {\n                let first = str.split(str[0]).length - 1;\n                let second = str.split(str[1]).length - 1;\n                let third = str.split(str[2]).length - 1;\n                let fourth = str.split(str[3]).length - 1;\n\n                let all = [];\n                all.push(first);\n                all.push(second);\n                all.push(third);\n                all.push(fourth);\n                console.log(all);\n\n                if (all.includes(4)) {\n                    poker++;\n                } else if (all.includes(3)) {\n                    unaTercia++;\n                } else if (all.includes(2)) {\n                    let count = 0;\n                    for (let i = 0; i < all.length; i++) {\n                        if (all[i] === 2) {\n                            count++;\n                        }\n                    }\n                    if (count === 4) {\n                        console.log(\"2P\");\n                        dosPar++;\n                    } else {\n                        unPar++;\n                        console.log(\"1P\");\n                    }\n                } else {\n                    console.log(\"TD\");\n                    todoDif++;\n                }\n            });\n\n            tempCat = {\n                todoDif: todoDif,\n                unPar: unPar,\n                dosPares: dosPar,\n                unaTercia: unaTercia,\n                poker: poker,\n                terciaPar: 0,\n                quintilla: 0,\n            };\n\n            setCategories(tempCat);\n        } else if (nums[0].length === 3) {\n            let arr = nums.map((str) => {\n                let first = str.split(str[0]).length - 1;\n                let second = str.split(str[1]).length - 1;\n                let third = str.split(str[2]).length - 1;\n\n                let all = [];\n                all.push(first);\n                all.push(second);\n                all.push(third);\n                console.log(all);\n\n                if (all.includes(3)) {\n                    unaTercia++;\n                } else if (all.includes(2)) {\n                    unPar++;\n                } else {\n                    console.log(\"TD\");\n                    todoDif++;\n                }\n            });\n\n            tempCat = {\n                todoDif: todoDif,\n                unPar: unPar,\n                unaTercia: unaTercia,\n                poker: poker,\n                terciaPar: 0,\n                quintilla: 0,\n            };\n\n            setCategories(tempCat);\n        }\n\n        if (nums[0].length === 5) {\n            let ei = prob5D.map((x) => parseFloat(x) * nums.length);\n            setEi({\n                todoDif: ei[0],\n                unPar: ei[1],\n                dosPares: ei[2],\n                unaTercia: ei[3],\n                terciaPar: ei[4],\n                poker: ei[5],\n                quintilla: ei[6],\n            });\n            let td = Math.pow(ei[0] - tempCat.todoDif, 2) / ei[0];\n            let unP = Math.pow(ei[1] - tempCat.unPar, 2) / ei[1];\n            let dosP = Math.pow(ei[2] - tempCat.dosPares, 2) / ei[2];\n            let unT = Math.pow(ei[3] - tempCat.unaTercia, 2) / ei[3];\n            let terciaP = Math.pow(ei[4] - tempCat.terciaPar, 2) / ei[4];\n            let p = Math.pow(ei[5] - tempCat.poker, 2) / ei[5];\n            let q = Math.pow(ei[6] - tempCat.quintilla, 2) / ei[6];\n            let total = td + unP + dosP + unT + terciaP + p + q;\n            setEiOi({\n                todoDif: td,\n                unPar: unP,\n                dosPares: dosP,\n                unaTercia: unT,\n                terciaPar: terciaP,\n                poker: p,\n                quintilla: q,\n                total: total,\n            });\n\n            setx20(total);\n            let chisq = chiSquareInverse.invChiSquareCDF(1 - alpha, 6);\n            setChi2(chisq);\n        } else if (nums[0].length === 4) {\n            let ei = prob4D.map((x) => parseFloat(x) * nums.length);\n            console.log(\"ENTRA:\", ei);\n            setEi({\n                todoDif: ei[0],\n                unPar: ei[1],\n                dosPares: ei[2],\n                unaTercia: ei[3],\n                terciaPar: 0,\n                poker: ei[4],\n                quintilla: 0,\n            });\n            let td = Math.pow(ei[0] - tempCat.todoDif, 2) / ei[0];\n            let unP = Math.pow(ei[1] - tempCat.unPar, 2) / ei[1];\n            let dosP = Math.pow(ei[2] - tempCat.dosPares, 2) / ei[2];\n            let unT = Math.pow(ei[3] - tempCat.unaTercia, 2) / ei[3];\n            let terciaP = 0;\n            let p = Math.pow(ei[4] - tempCat.poker, 2) / ei[4];\n            let q = 0;\n            let total = td + unP + dosP + unT + terciaP + p + q;\n            setEiOi({\n                todoDif: td,\n                unPar: unP,\n                dosPares: dosP,\n                unaTercia: unT,\n                terciaPar: 0,\n                poker: p,\n                quintilla: 0,\n                total: total,\n            });\n            console.log(total);\n            setx20(total);\n            let chisq = chiSquareInverse.invChiSquareCDF(1 - alpha, 6);\n            setChi2(chisq);\n            console.log(chisq);\n        } else if (nums[0].length === 3) {\n            let ei = prob3D.map((x) => parseFloat(x) * nums.length);\n            setEi({\n                todoDif: ei[0],\n                unPar: ei[1],\n                dosPares: 0,\n                unaTercia: ei[2],\n                terciaPar: 0,\n                poker: 0,\n                quintilla: 0,\n            });\n            let td = Math.pow(ei[0] - tempCat.todoDif, 2) / ei[0];\n            let unP = Math.pow(ei[1] - tempCat.unPar, 2) / ei[1];\n            let dosP = 0;\n            let unT = Math.pow(ei[2] - tempCat.unaTercia, 2) / ei[2];\n            let terciaP = 0;\n            let p = 0;\n            let q = 0;\n            let total = td + unP + dosP + unT + terciaP + p + q;\n            setEiOi({\n                todoDif: td,\n                unPar: unP,\n                dosPares: 0,\n                unaTercia: unT,\n                terciaPar: 0,\n                poker: 0,\n                quintilla: 0,\n                total: total,\n            });\n\n            setx20(total);\n            let chisq = chiSquareInverse.invChiSquareCDF(1 - alpha, 6);\n            setChi2(chisq);\n        }\n        setTestRun(true);\n    };\n\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Poker\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className=\"form-group\">\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <label for=\"semilla\">Nivel de cofianza:</label>\n                        <input id=\"semilla\" type=\"number\" value={c} className=\"form-control\" onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-8'>\n                        <p>H0: Los numeros del conjunto ri son independientes</p>\n                        <p>H1: Los numeros del conjunto ri no son independientes</p>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <label for=\"csv\">Numeros:</label>\n                        <textarea id=\"csv\" type=\"text\" value={numbersCSVString} className=\"form-control\" rows=\"4\" onChange={(e) => setNumbersCSVString(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => solve5D()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className=\"row\">\n                <div className='col-12'>\n                    <table className='table text-center'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">X^2 Tabla</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            <tr scope=\"row\">\n                                <td><b>{chi2 != 0 ? chi2.toFixed(4) : 0}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th className=\" text-left\" scope=\"col\">Categorias</th>\n                                <th scope=\"col\">Oi</th>\n                                <th scope=\"col\">Ei</th>\n                                <th scope=\"col\"> (Ei-Oi)^2/Ei </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td className=\" text-left\">Todos diferentes (TD)</td>\n                                <td>{categories.todoDif}</td>\n                                <td>{ei.todoDif.toFixed(4)}</td>\n                                <td>{eiOi.todoDif.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Un par (1P)</td>\n                                <td>{categories.unPar}</td>\n                                <td>{ei.unPar.toFixed(4)}</td>\n                                <td>{eiOi.unPar.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Dos Pares (2P)</td>\n                                <td>{categories.dosPares}</td>\n                                <td>{ei.dosPares.toFixed(4)}</td>\n                                <td>{eiOi.dosPares.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Tercia (T)</td>\n                                <td>{categories.unaTercia}</td>\n                                <td>{ei.unaTercia.toFixed(4)}</td>\n                                <td>{eiOi.unaTercia.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">1 Tercia y un par (TP)</td>\n                                <td>{categories.terciaPar}</td>\n                                <td>{categories.terciaPar.toFixed(4)}</td>\n                                <td>{eiOi.terciaPar.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Poker (P)</td>\n                                <td>{categories.poker}</td>\n                                <td>{ei.poker.toFixed(4)}</td>\n                                <td>{eiOi.poker.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Qintilla (Q)</td>\n                                <td>{categories.quintilla}</td>\n                                <td>{ei.quintilla.toFixed(4)}</td>\n                                <td>{eiOi.quintilla.toFixed(4)}</td>\n                            </tr>\n                            <tr>\n                                <td className=\" text-left\">Total</td>\n                                <td>{numbersLength}</td>\n                                <td>{numbersLength}</td>\n                                <td><b>{eiOi.total.toFixed(4)}</b></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    {(() => {\n                        if (testRun) {\n                            if (chi2 > x20) {\n                                return (<Jumbotron>\n                                    <p className=\"text-center\">Como el valor X^2 calculado es menor a X^2 de la tabla, no podemos rechazar que los números son independientes</p>\n                                </Jumbotron>)\n                            }\n                            return (<Jumbotron>\n                                <p className=\"text-center\">Como el valor X^2 calculado es mayor a X^2 de la tabla, podemos rechazar que los números son independientes</p>\n                            </Jumbotron>)\n                        }\n                    })()}\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default PruebaPoker;\n","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst Home = () => {\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Proyecto Generador\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-6' >\n                    <p>Christopher Delgado Garcia</p>\n                    <p>A01187760</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport CorridaArribaAbajoMedia from './corridaArribaAbajoMedia';\nimport CuadradosMedios from './cuadradosMedios';\nimport ProductosMedios from './productosMedios';\nimport MultiplicadorConstante from './multiplicadorConstante';\nimport Lineal from './lineal';\nimport CongruencialMultiplicativo from './congruencialMultiplicativo';\nimport CongruencialAditivo from './congruencialAditivo';\nimport CongruencialCuadratico from './congruencialCuadrativo';\nimport Medias from './medias';\nimport Varianza from './varianza'\nimport Series from './series'\nimport CorridaArribaAbajo from './corridaArribaAbajo'\nimport Kolmogorov from './kolmogorov'\nimport ChiCuadrada from './chi-Cuadrada'\nimport TransformadaInversa from './transformadaInversa'\nimport Convolucion from './convolucion'\nimport Huecos from './huecos'\nimport Poker from './poker'\nimport Home from './home'\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/proyectoSimulacion/corrida-arriba-abajo-media\" component={CorridaArribaAbajoMedia} exact />\n            <Route path=\"/proyectoSimulacion/corrida-arriba-abajo\" component={CorridaArribaAbajo} exact />\n            <Route path=\"/proyectoSimulacion/cuadrados-medios\" component={CuadradosMedios} exact />\n            <Route path=\"/proyectoSimulacion/productos-medios\" component={ProductosMedios} exact />\n            <Route path=\"/proyectoSimulacion/mutiplicador-constante\" component={MultiplicadorConstante} exact />\n            <Route path=\"/proyectoSimulacion/lineal\" component={Lineal} exact />\n            <Route path=\"/proyectoSimulacion/congruencial-multiplicativo\" component={CongruencialMultiplicativo} exact />\n            <Route path=\"/proyectoSimulacion/congruencial-aditivo\" component={CongruencialAditivo} exact />\n            <Route path=\"/proyectoSimulacion/congruencial-cuadratico\" component={CongruencialCuadratico} exact />\n            <Route path=\"/proyectoSimulacion/medias\" component={Medias} exact />\n            <Route path=\"/proyectoSimulacion/varianza\" component={Varianza} exact />\n            <Route path=\"/proyectoSimulacion/series\" component={Series} exact />\n            <Route path=\"/proyectoSimulacion/kolmogorov\" component={Kolmogorov} exact />\n            <Route path=\"/proyectoSimulacion/chi-cuadrada\" component={ChiCuadrada} exact />\n            <Route path=\"/proyectoSimulacion/transformada-inversa\" component={TransformadaInversa} exact />\n            <Route path=\"/proyectoSimulacion/convolusion\" component={Convolucion} exact />\n            <Route path=\"/proyectoSimulacion/huecos\" component={Huecos} exact />\n            <Route path=\"/proyectoSimulacion/poker\" component={Poker} exact />\n            <Route path=\"/proyectoSimulacion/\" component={Home} exact />\n        </Switch>\n    );\n}\n\nexport default Routes;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\n\nconst Header = () => {\n    return (\n        <div>\n            <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n                <Link className='navbar-brand' to=\"/proyectoSimulacion\">Proyecto Simulacion</Link>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <NavDropdown title=\"Algoritmo\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/cuadrados-medios\">Cuadrados Medios</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/productos-medios\">Productos Medios</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/mutiplicador-constante\">Multiplicador Constante</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/lineal\">Lineal</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/congruencial-multiplicativo\">Congruencial Multiplicativo</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/congruencial-aditivo\">Congruencial Aditivo</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/congruencial-cuadratico\">Congruencial Cuadrativo</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/medias\">Medias</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/varianza\">Varianza</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas Uniformidad\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/chi-cuadrada\">Chi Cuadrada</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/kolmogorov\">Kolmogorov</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas Independencia\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/corrida-arriba-abajo\">Corridas Arriba y Abajo</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/corrida-arriba-abajo-media\">Corridas Arriba y Abajo Media</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/poker\">Poker</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/series\">Series</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/huecos\">Huecos</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Metodos\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/transformada-inversa\">Transformada Inversa</Link>\n                            <Link className='dropdown-item' to=\"/proyectoSimulacion/convolusion\">Convolusion</Link>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport Routes from './components/routes';\nimport Menu from './components/menu';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <div className='container'>\n        <br></br>\n        <Routes />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}