{"version":3,"sources":["services/util.js","components/corridaArribaAbajoMedia.js","components/cuadradosMedios.js","components/productosMedios.js","components/multiplicadorConstante.js","components/lineal.js","components/congruencialMultiplicativo.js","components/congruencialAditivo.js","components/congruencialCuadrativo.js","components/medias.js","components/varianza.js","components/series.js","components/corridaArribaAbajo.js","components/kolmogorov.js","components/chi-Cuadrada.js","components/transformadaInversa.js","components/routes.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCentro","numero","digitos","textoNumero","length","largo","Math","floor","slice","transformToR","x","d","pow","toFixed","CorridaArribaAbajoMedia","useState","numeros","setNumeros","c","setC","N","setN","C0","setC0","N1","setN1","N0","setN0","MC0","setMC0","VariazaC0","setVariazaC0","Z0","setZ0","Hipot","setHipot","className","Jumbotron","htmlFor","id","type","value","onChange","e","target","rows","onClick","tempArr","split","n","temp","countSwitch","swithflag","flag","standardNormalTable","forEach","val","index","console","log","parseFloat","count1","reduce","a","b","trim","parseInt","count0","mc0","variazaC0","z0","abs","sqrt","prueba","scope","CuadradosMedios","setD","seed","setSeed","amount","setAmount","generatedNums","setGeneratedNums","useEffect","seedLength","toString","constuct","w","y","z","min","max","style","marginTop","seedSquare","middleSeedValues","modifyNums","push","i","generateNums","map","ProductosMedios","seed2","setSeed2","seed2Length","v","MultiplicadorConstante","alert","Lineal","setA","m","setM","CongruencialMultiplicativo","k","setK","g","setG","CongruencialAditivo","arr","CongruencialCuadratico","setB","Medias","alpha","setAlpha","LI","setLI","LS","setLS","R","setR","media","temp2","Varianza","varianza","degreeFreed","tempAlp","limitInf","chiSquareInverse","invChiSquareCDF","limitSup","Series","D","cord","new_rango","valor_x","valor_y","tempAlpha","intervalos","count","limitInfy","limitSupy","j","limitInfx","limitSupx","CorridaArribaAbajo","swithFlag","Kolmogorov","Dmas","setDmas","Dmenos","setDmenos","Dna","setDna","sort","arr1","arr3","arr4","arr5","table","d_max","d_min","d_table","d_value","ChiCuadrada","resultList","setResultList","low","hight","ei","countList","interval","round","element","tempElemet","finalList","oi","result","tempr","tempchi","fac","TransformadaInversa","lamda","setLamda","setMedia","mediaPiezas","setMediaPiezas","probaPiezas","setProbaPiezas","nums","random","r","probs","prob","E","piezas","acumulado","index2","Routes","path","component","exact","Header","Navbar","bg","variant","expand","to","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9303a56.chunk.js","sourcesContent":["const getCentro = (numero, digitos) => {\n    numero += '';\n    let textoNumero = (numero.length - digitos) % 2 == 0 ? '' + numero : '0' + numero;\n    let largo = Math.floor((textoNumero.length - digitos) / 2);\n    return textoNumero.slice(largo, largo + digitos);\n}\n\nconst transformToR = (x, d) => (x * Math.pow(10, -d)).toFixed(d);\n\nmodule.exports = { getCentro, transformToR };","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\n\nconst CorridaArribaAbajoMedia = () => {\n    let [numeros, setNumeros] = useState('');\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [N, setN] = useState(0);\n    let [C0, setC0] = useState(0);\n    let [N1, setN1] = useState(0);\n    let [N0, setN0] = useState(0);\n    let [MC0, setMC0] = useState(0);\n    let [VariazaC0, setVariazaC0] = useState(0);\n    let [Z0, setZ0] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = 0.5;\n        let countSwitch = 0;\n        let swithflag = 0;\n\n        let temp;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            console.log(val)\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        let count1 = tempArr.reduce((a, b) => {\n            let temp = parseFloat(b.trim()) > media ? 1 : 0\n            if (temp != swithflag) {\n                countSwitch++;\n                swithflag = !swithflag;\n            }\n            return parseInt(a) + temp;\n        }, 0)\n        let count0 = n - count1\n\n        setC0(countSwitch)\n        setN1(count1)\n        setN0(count0);\n        let mc0 = ((2 * count1 * count0) / n) + (1 / 2);\n        setMC0(mc0.toFixed(4));\n\n        let variazaC0 = ((2 * count0 * count1) * (2 * count0 * count1 - n)) / ((n * n) * (n - 1))\n        setVariazaC0(variazaC0.toFixed(4))\n\n        temp = (temp * .01).toFixed(2);\n\n        let z0 = Math.abs((countSwitch - mc0) / Math.sqrt(variazaC0))\n        setZ0(z0.toFixed(4))\n\n        let hipot = temp > z0 && z0 > -temp ? \"Como el valor Zo cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") no podemos rechazar que los números sean independientes\" :\n            \"Como el valor Zo no cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") podemos concluir que los números no son independientes\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba independencia Corridas Arriba y Abajo Media\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Generar</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">n</th>\n                                <th scope=\"col\">Co</th>\n                                <th scope=\"col\">n0</th>\n                                <th scope=\"col\">n1</th>\n                                <th scope=\"col\">μCo</th>\n                                <th scope=\"col\">σ2Co</th>\n                                <th scope=\"col\">Zo</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{N}</td>\n                                <td>{C0}</td>\n                                <td>{N0}</td>\n                                <td>{N1}</td>\n                                <td>{MC0}</td>\n                                <td>{VariazaC0}</td>\n                                <td>{Z0}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default CorridaArribaAbajoMedia","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CuadradosMedios = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        setD(seedLength);\n    }, [seed])\n    const constuct = (w, x, y, z) => {\n        return {\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = Math.pow(seed, 2);\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        console.log(middleSeedValues);\n        tempArr.push(constuct(seed, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = Math.pow(tempArr[i - 1].y, 2);\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Cuadrados Medios\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-2' >\n                    <label htmlFor='semilla'>Semilla:</label>\n                    <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <label htmlFor='generar'>Numeros a Generar:</label>\n                    <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <br />\n                    <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                </div>\n            </div><br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Xi^2</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CuadradosMedios","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst ProductosMedios = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [seed2, setSeed2] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        let seed2Length = seed2.toString().length\n        setD(seedLength > seed2Length ? seedLength : seed2Length);\n    }, [seed, seed2])\n    const constuct = (v, w, x, y, z) => {\n        return {\n            v,\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = seed * seed2;\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        tempArr.push(constuct(seed, seed2, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = tempArr[i - 1].w * tempArr[i - 1].y;\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(tempArr[i - 1].w, tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Productos Medios\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla 1:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla 2:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed2} min='100' max='999999' onChange={(e) => setSeed2(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">X1i</th>\n                                <th scope=\"col\">X2i</th>\n                                <th scope=\"col\">X1*X2</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.v}</td>\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProductosMedios","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst MultiplicadorConstante = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState(0);\n    let [seed2, setSeed2] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n    useEffect(() => {\n        let seedLength = seed.toString().length;\n        let seed2Length = seed2.toString().length\n        setD(seedLength > seed2Length ? seedLength : seed2Length);\n    }, [seed, seed2])\n    const constuct = (v, w, x, y, z) => {\n        return {\n            v,\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        if (seed.length !== seed2.length) {\n            alert('La semilla y la constante tienen que tener los mismos digitos');\n            return;\n        }\n        let tempArr = [];\n        let seedSquare = seed * seed2;\n        let middleSeedValues = modifyNums.getCentro(seedSquare, d);\n        tempArr.push(constuct(seed2, seed, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = seed2 * tempArr[i - 1].y;\n            middleSeedValues = modifyNums.getCentro(seedSquare, d);\n            tempArr.push(constuct(seed2, tempArr[i - 1].y, seedSquare, middleSeedValues, modifyNums.transformToR(middleSeedValues, d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Multiplicador Constante\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Semilla:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Constante:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed2} min='100' max='999999' onChange={(e) => setSeed2(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Yi</th>\n                                <th scope=\"col\">Centro</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MultiplicadorConstante","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst Lineal = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [a, setA] = useState(0);\n    let [c, setC] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = ((parseInt(a) * seed) + parseInt(c)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (a * tempArr[i - 1].y + parseInt(c)) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Lineal\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>a:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={a} min='100' max='999999' onChange={(e) => setA(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>c:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={c} min='100' max='999999' onChange={(e) => setC(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>m:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Lineal","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CongruencialMultiplicativo = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [k, setK] = useState(0);\n    let [g, setG] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let a = parseInt(g) + (8 * k);\n        let m = Math.pow(2, g);\n        let tempArr = [];\n        let seedSquare = ((parseInt(a) * seed)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (a * tempArr[i - 1].y) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Multiplicativo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>k:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={k} min='100' max='999999' onChange={(e) => setK(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>g:</label>\n                        <input id='semilla' className=\"form-control\" type='number' value={g} min='100' max='999999' onChange={(e) => setG(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialMultiplicativo","import React, { useState, useEffect } from 'react'\nimport { Jumbotron, InputGroup } from 'react-bootstrap'\n\n\nconst CongruencialAditivo = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (w, x, y, z) => {\n        return {\n            w,\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = seed.split(',');\n\n        if (tempArr.length < 5) {\n            alert('Debes ingresar al menos 5 numeros')\n            return;\n        }\n        let k = tempArr.length - 1\n        let arr = tempArr.map((x) => {\n            return parseInt(x.trim());\n        })\n        tempArr = [];\n        for (let i = 0; i < amount; i++) {\n            let seedSquare = (arr[i + k] + arr[i]) % m;\n            arr.push(seedSquare)\n            tempArr.push(constuct(arr[i + k], arr[i], seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Aditivo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-8' >\n                        <label htmlFor='semilla'>Lista de numeros:</label>\n                        <input id='semilla' value={seed} className=\"form-control\" min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>M:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='col-2'>\n                        <div className='btn btn btn-outline-primary' onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xn</th>\n                                <th scope=\"col\">Xn+k</th>\n                                <th scope=\"col\">Xn+1</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.w}</td>\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialAditivo","import React, { useState, useEffect } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\n\nconst CongruencialCuadratico = () => {\n    let [d, setD] = useState(4);\n    let [seed, setSeed] = useState(0);\n    let [a, setA] = useState(0);\n    let [b, setB] = useState(0);\n    let [c, setC] = useState(0);\n    let [m, setM] = useState(0);\n    let [amount, setAmount] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (x, y, z) => {\n        return {\n            x,\n            y,\n            z\n        };\n    };\n    const generateNums = () => {\n        let tempArr = [];\n        let seedSquare = (((parseInt(a) * (seed * seed)) + (parseInt(b) * parseInt(seed))) + parseInt(c)) % m;\n        tempArr.push(constuct(seed, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        for (let i = 1; i < amount; i++) {\n            seedSquare = (((parseInt(a) * (tempArr[i - 1].y * tempArr[i - 1].y)) + (parseInt(b) * parseInt(tempArr[i - 1].y))) + parseInt(c)) % m;\n            tempArr.push(constuct(tempArr[i - 1].y, seedSquare, (seedSquare / (m - 1)).toFixed(d)));\n        }\n        setGeneratedNums(tempArr);\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Algoritmo Congruencial Cuadratico\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>X0:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={seed} min='100' max='999999' onChange={(e) => setSeed(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>a:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={a} min='100' max='999999' onChange={(e) => setA(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>b:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={b} min='100' max='999999' onChange={(e) => setB(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>c:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={c} min='100' max='999999' onChange={(e) => setC(e.target.value)} />\n                    </div>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>m:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={m} min='100' max='999999' onChange={(e) => setM(e.target.value)} />\n                    </div>\n                </div>\n                <br />\n                <div className=\"row\">\n                    <div className='col-2'>\n                        <label htmlFor='generar'>Numeros a Generar:</label>\n                        <input id='generar' className=\"form-control\" type='number' value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n                    <div className='ol-2'>\n                        <br />\n                        <div className='btn btn-outline-primary' style={{ marginTop: \"10%\" }} onClick={(e) => generateNums()}>Generar</div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Xi-1</th>\n                                <th scope=\"col\">Xi</th>\n                                <th scope=\"col\">Ri</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.x}</td>\n                                            <td>{e.y}</td>\n                                            <td>{e.z}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CongruencialCuadratico","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\nconst Medias = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let temp = 0;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = tempArr.reduce((a, b) => {\n            return a + parseFloat(b.trim())\n        }, 0.0) / n;\n        setR((media).toFixed(4));\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n\n        let temp2 = (temp * .01) / (Math.sqrt(12 * n));\n        setLI((.5 - temp2).toFixed(4));\n        setLS((.5 + temp2).toFixed(4));\n\n        let hipot = .5 + temp2 > media && media > .5 - temp2 ? \"Como nuestro ṝ, se encuentra dentro de los límites, no se puede rechazar el planteamiento de que el conjunto de números tiene media 0.5\" :\n            \"Como nuestro ṝ, no se encuentra dentro de los límites, se puede rechazar el planteamiento de que el conjunto de números tiene media 0.5\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Medias\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">ṝ</th>\n                                <th scope=\"col\">LI</th>\n                                <th scope=\"col\">LS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>µ𝑟𝑖=0.5</td>\n                                <td>µ𝑟𝑖≠0.5</td>\n                                <td>{R}</td>\n                                <td>{LI}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Medias","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\nimport chiSquareInverse from 'inv-chisquare-cdf'\n\nconst Varianza = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let media = tempArr.reduce((a, b) => {\n            return a + parseFloat(b.trim())\n        }, 0.0) / n;\n\n        let varianza = tempArr.reduce((a, b) => {\n            return a + (Math.pow(parseFloat(b.trim()) - media, 2))\n        }, 0.0) / (n - 1);\n        setR((varianza).toFixed(4));\n        let degreeFreed = n - 1;\n\n        let temp = (12 * (tempArr.length - 1))\n\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n        let tempAlp = 1 - parseFloat(c);\n        let limitInf = (chiSquareInverse.invChiSquareCDF(tempAlp / 2, degreeFreed) / temp).toFixed(4)\n        let limitSup = (chiSquareInverse.invChiSquareCDF((1 - (tempAlp / 2)), degreeFreed) / temp).toFixed(4)\n        setLI(limitInf);\n        setLS(limitSup);\n\n        let hipot = limitSup > varianza && varianza >= limitInf ? \"Como nuestro σ2𝑟𝑖, se encuentra dentro de los límites, no se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\" :\n            \"Como nuestro σ2𝑟𝑖, no se encuentra dentro de los límites, se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Varianza\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">σ2𝑟𝑖</th>\n                                <th scope=\"col\">LI</th>\n                                <th scope=\"col\">LS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>σ2𝑟𝑖=1/12</td>\n                                <td>σ2𝑟𝑖≠1/12</td>\n                                <td>{R}</td>\n                                <td>{LI}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Varianza","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\nimport chiSquareInverse from 'inv-chisquare-cdf'\n\nconst Series = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [D, setD] = useState(9);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let cord = [];\n\n        for (let i = 0; i < n - 1; i++) {\n            let new_rango = {\n                valor_x: parseFloat(tempArr[i]),\n                valor_y: parseFloat(tempArr[i + 1])\n            };\n            cord.push(new_rango);\n        }\n\n        console.log(cord)\n\n        let ei = ((n - 1) / D).toFixed(2);\n        let tempAlpha = (1 - parseFloat(c)).toFixed(2)\n        setAlpha(tempAlpha)\n        let chi_cuadrada = chiSquareInverse.invChiSquareCDF(1 - tempAlpha * 2, D - 1).toFixed(4);\n\n        let intervalos = Math.sqrt(D).toFixed(2);\n\n        let count = []\n        for (let index = 0; index < D; index++) {\n            count[index] = 0;\n        }\n\n        console.log(count, n)\n\n        for (let i = 0; i < intervalos; i++) {\n            let limitInfy = i * (1 / intervalos);\n            let limitSupy = i + 1 * (1 / intervalos);\n            for (let j = 0; j < intervalos; j++) {\n                let limitInfx = j * (1 / intervalos);\n                let limitSupx = j + 1 * (1 / intervalos);\n                cord.forEach(x => {\n                    if ((x.valor_x > limitInfx && x.valor_x < limitSupx) &&\n                        (x.valor_y > limitInfy &&\n                            x.valor_y < limitSupy)) {\n                        console.log(x)\n                        count[i + j] = count[i + j] ? count[i + j] + 1 : 1;\n\n                    }\n                    console.log(count)\n                });\n            }\n        }\n\n        console.log(count, n)\n        return;\n\n        let media = tempArr.reduce((a, b) => {\n            return a + parseFloat(b.trim())\n        }, 0.0) / n;\n\n        let varianza = tempArr.reduce((a, b) => {\n            return a + (Math.pow(parseFloat(b.trim()) - media, 2))\n        }, 0.0) / (n - 1);\n        setR((varianza).toFixed(4));\n        let degreeFreed = n - 1;\n\n        let temp = (12 * (tempArr.length - 1))\n\n\n        let tempAlp = 1 - parseFloat(c);\n        setLI((chiSquareInverse.invChiSquareCDF(tempAlp / 2, degreeFreed) / temp).toFixed(4));\n        setLS((chiSquareInverse.invChiSquareCDF((1 - (tempAlp / 2)), degreeFreed) / temp).toFixed(4));\n\n        let hipot = .5 + temp > media && media > .5 - temp ? \"Como nuestro σ2𝑟𝑖, se encuentra dentro de los límites, no se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\" :\n            \"Como nuestro σ2𝑟𝑖, no se encuentra dentro de los límites, se puede rechazar el planteamiento de que el conjunto de números tiene una varianza 1/12\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Series\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                    <div className='col-3' >\n                        <label htmlFor='semilla'>Numero de divisiones:</label>\n                        <input id='semilla' type='number' className=\"form-control\" value={D} onChange={(e) => setD(e.target.value)} />\n                        <p><small>Tienes que ser un cuadrado. Ejemplo 3x3 = 9 - Divisiones</small></p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">σ2𝑟𝑖</th>\n                                <th scope=\"col\">LI</th>\n                                <th scope=\"col\">LS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>σ2𝑟𝑖=1/12</td>\n                                <td>σ2𝑟𝑖≠1/12</td>\n                                <td>{R}</td>\n                                <td>{LI}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Series","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\n\nconst CorridaArribaAbajo = () => {\n    let [numeros, setNumeros] = useState('');\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.05)\n    let [N, setN] = useState(0);\n    let [C0, setC0] = useState(0);\n    let [MC0, setMC0] = useState(0);\n    let [VariazaC0, setVariazaC0] = useState(0);\n    let [Z0, setZ0] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let countSwitch = 0;\n        let swithFlag = 0;\n\n        let temp;\n        let flag = true;\n        standardNormalTable.forEach((val, index) => {\n            console.log(val)\n            if (val >= 1 - ((1 - parseFloat(c)) / 2) && flag) {\n                temp = index;\n                flag = false;\n            }\n        });\n\n        console.log(temp, 1 - ((1 - parseFloat(c)) / 2), (1 - parseFloat(c)).toFixed(2))\n\n        for (let index = 1; index < n; index++) {\n            let temp = tempArr[index] <= tempArr[index - 1] ? 0 : 1\n            if (temp != swithFlag) {\n                countSwitch++;\n                swithFlag = !swithFlag;\n            }\n        }\n\n        setC0(countSwitch)\n        let mc0 = ((2 * n - 1) / 3);\n        setMC0(mc0.toFixed(4));\n\n        let variazaC0 = ((16 * n - 29) / 90)\n        setVariazaC0(variazaC0.toFixed(4))\n\n        setAlpha((1 - parseFloat(c)).toFixed(2))\n        temp = (temp * .01).toFixed(2);\n        let z0 = Math.abs((countSwitch - mc0) / Math.sqrt(variazaC0))\n        setZ0(z0.toFixed(4))\n\n        let hipot = temp > z0 && z0 > -temp ? \"Como el valor Zo cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") no podemos rechazar que los números sean independientes\" :\n            \"Como el valor Zo no cae dentro de nuestro intervalo (-\" + temp + \", \" + temp + \") podemos concluir que los números no son independientes\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba independencia Corridas Arriba y Abajo\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Generar</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">n</th>\n                                <th scope=\"col\">Co</th>\n                                <th scope=\"col\">μCo</th>\n                                <th scope=\"col\">σ2Co</th>\n                                <th scope=\"col\">Zo</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{N}</td>\n                                <td>{C0}</td>\n                                <td>{MC0}</td>\n                                <td>{VariazaC0}</td>\n                                <td>{Z0}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default CorridaArribaAbajo","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\n\nconst Kolmogorov = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [Dmas, setDmas] = useState(0);\n    let [Dmenos, setDmenos] = useState(0);\n    let [Dna, setDna] = useState(0);\n    let [Hipot, setHipot] = useState('');\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n\n        if (n > 20) {\n            alert('La prueba no se puede realizar con mas de 20 numeros')\n            return;\n        }\n\n        tempArr.sort((a, b) => parseFloat(a) - parseFloat(b));\n        let arr1 = [];\n        let arr3 = [];\n        let arr4 = [];\n        let arr5 = [];\n        for (let i = 0; i < n; i++) {\n            arr1[i] = (i + 1) / n;\n            arr3[i] = i / n;\n            arr4[i] = parseFloat(\n                (arr1[i] - tempArr[i]).toFixed(4)\n            );\n            arr5[i] = parseFloat(\n                (tempArr[i] - arr3[i]).toFixed(4)\n            );\n        }\n        let table = [];\n        table[0] = [0.995, 0.99, 0.975, 0.95, 0.9];\n        table[1] = [0.9293, 0.9, 0.8418, 0.7763, 0.6837];\n        table[2] = [0.829, 0.7845, 0.7076, 0.636, 0.5648];\n        table[3] = [0.7342, 0.6888, 0.6239, 0.5652, 0.4926];\n        table[4] = [0.6685, 0.6271, 0.5632, 0.5094, 0.4469];\n        table[5] = [0.6166, 0.5774, 0.5192, 0.4679, 0.4103];\n        table[6] = [0.5758, 0.5384, 0.4834, 0.436, 0.3814];\n        table[7] = [0.5418, 0.5065, 0.4542, 0.4096, 0.3582];\n        table[8] = [0.5133, 0.4796, 0.43, 0.3874, 0.339];\n        table[9] = [0.4889, 0.4566, 0.4092, 0.3686, 0.3225];\n        table[10] = [0.4677, 0.4367, 0.3912, 0.3524, 0.3082];\n        table[11] = [0.449, 0.4191, 0.3754, 0.3381, 0.2957];\n        table[12] = [0.4324, 0.4036, 0.3614, 0.3254, 0.2846];\n        table[13] = [0.4176, 0.3897, 0.3448, 0.3141, 0.2747];\n        table[14] = [0.4042, 0.3771, 0.3376, 0.3039, 0.2658];\n        table[15] = [0.392, 0.3657, 0.3283, 0.2947, 0.2577];\n        table[16] = [0.3808, 0.3552, 0.3179, 0.2862, 0.2503];\n        table[17] = [0.3706, 0.3456, 0.3093, 0.2785, 0.2435];\n        table[18] = [0.3611, 0.3368, 0.3014, 0.2713, 0.2435];\n        table[19] = [0.3524, 0.3286, 0.294, 0.2647, 0.2315];\n\n        let d_max = Math.max(...arr4);\n        let d_min = Math.abs(Math.min(...arr5));\n        setDmas(d_max);\n        setDmenos(d_min)\n\n\n\n        let d_value = d_max > d_min ? d_max : d_min;\n        let tempAlp = (1 - parseFloat(c)).toFixed(2);\n\n        setAlpha(tempAlp)\n        let d_table;\n\n\n        switch (parseFloat(tempAlp)) {\n            case 0.01:\n                d_table = table[n - 1][0];\n                break;\n            case 0.02:\n                d_table = table[n - 1][1];\n                break;\n            case 0.05:\n                d_table = table[n - 1][2];\n                break;\n            case 0.1:\n                d_table = table[n - 1][3];\n                break;\n            case 0.2:\n                d_table = table[n - 1][4];\n                break;\n            default:\n                d_table = 0;\n                break;\n        }\n\n        console.log(d_table, tempAlp)\n        setDna(d_table)\n\n        let hipot = d_table > d_value ? 'Como D α,𝑛 > D no se puede rechazar que los números se distribuyen uniformemente' :\n            'Como D α,𝑛 < D se puede rechazar que los números se distribuyen uniformemente'\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba Uniformidad Kolmogorov-Smirnov\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal (.95, .99, .90, .98, .80)</small></p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Alpha</th>\n                                <th scope=\"col\">D+</th>\n                                <th scope=\"col\">D-</th>\n                                <th scope=\"col\">Da,n</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{alpha}</td>\n                                <td>{Dmas}</td>\n                                <td>{Dmenos}</td>\n                                <td>{Dna}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default Kolmogorov","import React, { useState } from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nimport { standardNormalTable } from 'simple-statistics'\nimport chiSquareInverse from 'inv-chisquare-cdf'\n\nconst ChiCuadrada = () => {\n    let [numeros, setNumeros] = useState('');\n    let [N, setN] = useState(0);\n    let [c, setC] = useState(0.95);\n    let [alpha, setAlpha] = useState(0.0)\n    let [LI, setLI] = useState(0);\n    let [LS, setLS] = useState(0);\n    let [R, setR] = useState(0);\n    let [Hipot, setHipot] = useState('');\n    let [resultList, setResultList] = useState([]);\n\n\n    const prueba = () => {\n        if (parseFloat(c) < 0 || parseFloat(c) > 1) {\n            alert('Inserta un nivel de aceptacion entre 0 y 1')\n            return;\n        }\n\n        let tempArr = numeros.split(',');\n        let n = tempArr.length\n        setN(n)\n        let m = (Math.pow(n, .5));\n\n        tempArr.sort((a, b) => parseFloat(a) - parseFloat(b));\n\n        let low = 0;\n        let hight = 1;\n        let ei = n / m;\n        let index = 0\n        let countList = []\n        let interval = 1 / Math.round(m);\n        let count = 0;\n        tempArr.forEach(element => {\n            let tempElemet = parseFloat(element)\n            if (tempElemet > (low * interval) && tempElemet <= (hight * interval)) {\n                count++\n            } else {\n                low++;\n                hight++;\n                countList[index] = count;\n                count = 1;\n                index++;\n            }\n        });\n        countList[index] = count;\n\n        let finalList = [];\n\n        countList.forEach(element => {\n            finalList.push({\n                oi: element,\n                ei: ei,\n                result: (Math.pow(ei - element, 2)) / ei\n            })\n        });\n\n        setResultList(finalList)\n        let tempr = finalList.reduce((a, b) => {\n            return a + parseFloat(b.result);\n        }, 0.0).toFixed(2)\n        setR(tempr);\n        let tempAlp = (1 - parseFloat(c)).toFixed(2);\n        let degreeFreed = m > 2 ? m - 1 : 1;\n        let tempchi = chiSquareInverse.invChiSquareCDF(1 - tempAlp, degreeFreed).toFixed(2);\n        setLS(tempchi);\n\n        let hipot = tempr < tempchi ? \"Como nuestro estadístico calculado es menor a nuestro estadístico de las tablas, no podemos rechazar que nuestros números sigan una distribución uniforme continua\" :\n            \"Como nuestro estadístico calculado es mayor a nuestro estadístico de las tablas,  podemos rechazar que nuestros números siguen una distribución uniforme continua\";\n        setHipot(hipot)\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Prueba de Uniformidad Chi cuadrada\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='form-group'>\n                <div className='row'>\n                    <div className='col-2' >\n                        <label htmlFor='semilla'>Nivel de confianza:</label>\n                        <input id='semilla' type='text' className=\"form-control\" value={c} onChange={(e) => setC(e.target.value)} />\n                        <p><small>Ingresa en forma decimal</small></p>\n                    </div>\n                </div>\n\n                <div className='row'>\n                    <div className='col-12' >\n                        <label htmlFor='numeros'>Numeros:</label>\n                        <textarea id='numeros' className=\"form-control\" rows=\"4\" onChange={(e) => setNumeros(e.target.value)} />\n                        <p><small>Ingresa los numeros separados por comas</small></p>\n                    </div>\n                </div>\n            </div>\n            <div className='row text-right'>\n                <div className='col-12'>\n                    <div className='btn btn-outline-primary' onClick={(e) => prueba()}>Correr Prueba</div>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">Oi</th>\n                                <th scope=\"col\">EI</th>\n                                <th scope=\"col\">(𝑬𝒊 −𝑶𝒊)𝟐/𝑬𝒊</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                resultList.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.oi}</td>\n                                            <td>{e.ei}</td>\n                                            <td>{e.result}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-12'>\n                    <table className=\"table text-center\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">𝐻𝑜</th>\n                                <th scope=\"col\">𝐻1</th>\n                                <th scope=\"col\">𝑋2^</th>\n                                <th scope=\"col\">𝑋^2 a,m</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr scope=\"row\">\n                                <td>𝑟𝑖 ~U(0,1)</td>\n                                <td>ri no son uniformes</td>\n                                <td>{R}</td>\n                                <td>{LS}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <br />\n                    <p className=\"text-center\">{Hipot}</p>\n                </div>\n            </div>\n\n        </div >\n    )\n}\n\nexport default ChiCuadrada","import React, { useState, useEffect } from 'react'\nimport modifyNums from '../services/util'\nimport { Jumbotron } from 'react-bootstrap'\n\nfunction fac(n) {\n    return (n < 2) ? 1 : fac(n - 1) * n;\n}\n\nconst TransformadaInversa = () => {\n    let [d, setD] = useState(0);\n    let [seed, setSeed] = useState('1');\n    let [amount, setAmount] = useState(0);\n    let [a, setA] = useState(0);\n    let [b, setB] = useState(0);\n    let [lamda, setLamda] = useState(0);\n    let [media, setMedia] = useState(0);\n    let [mediaPiezas, setMediaPiezas] = useState(0);\n    let [probaPiezas, setProbaPiezas] = useState(0);\n    let [generatedNums, setGeneratedNums] = useState([]);\n\n    const constuct = (w, x, y, z) => {\n        return {\n            w,\n            x,\n            y,\n            z\n        };\n    };\n\n\n    const generateNums = () => {\n        let nums = [];\n        switch (seed) {\n            case '1':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        r: random,\n                        x: parseFloat(a) + ((parseFloat(b) - parseFloat(a)) * random)\n                    })\n\n                }\n                setGeneratedNums(nums);\n                break;\n            case '2':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        r: random,\n                        x: -Math.log(1 - random) / lamda\n                    })\n                }\n                setGeneratedNums(nums);\n                break;\n            case '3':\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n                    nums.push({\n                        r: random,\n                        x: Math.pow(1 - media, random) * Math.pow(media, 1 - random)\n                    })\n                }\n                setGeneratedNums(nums);\n                break;\n            case '4':\n                let probs = [];\n                for (let index = 0; index < probaPiezas; index++) {\n                    let prob = (Math.pow(mediaPiezas, index) * (Math.pow(Math.E, -mediaPiezas))) / fac(index)\n                    probs.push(prob)\n                }\n\n                for (let index = 0; index < amount; index++) {\n                    let random = Math.random()\n\n                    let piezas = 0;\n                    let acumulado = 0;\n                    for (let index2 = 0; index2 < probs.length; index2++) {\n                        if (probs[index2] + acumulado > random) {\n                            piezas = index2;\n                            break;\n                        } else {\n                            acumulado += probs[index2];\n                        }\n                    }\n                    nums.push({\n                        r: random.toFixed(2),\n                        x: piezas\n                    })\n\n                }\n                setGeneratedNums(nums);\n                break;\n\n\n\n            default:\n                break;\n        }\n    }\n\n    return (\n        <div>\n            <div className='row'>\n                <Jumbotron>\n                    <h1>\n                        Método Transformada Inversa\n                    </h1>\n                </Jumbotron>\n            </div>\n            <br />\n            <div className='row'>\n                <div className='col-3' >\n                    <label htmlFor='semilla'>Distribución:</label>\n                    <select d='semilla' className=\"form-control\" value={seed} onChange={(e) => setSeed(e.target.value)}>\n                        <option value=\"1\" >Distribución Uniforme</option>\n                        <option value=\"2\" >Distribución Exponencial</option>\n                        <option value=\"3\" >Distribución Bernoulli</option>\n                        <option value=\"4\" >Distribución Poisson</option>\n                        <option value=\"5\" >Distribución Normal</option>\n                    </select>\n                </div>\n                <div className='col-2'>\n                    <label htmlFor='generar'>Numeros a Generar:</label>\n                    <input id='generar' type='number' className=\"form-control\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                </div>\n                <div className='col-2'>\n                    <br />\n                    <div className='btn btn-outline-primary' style={{ marginTop: \"5%\" }} onClick={(e) => generateNums()}>Generar</div>\n                </div>\n            </div><br />\n            {(() => {\n                switch (seed) {\n                    case '1':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>a:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={a} onChange={(e) => setA(e.target.value)} />\n                            </div>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>b:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={b} onChange={(e) => setB(e.target.value)} />\n                            </div>\n                        </div>\n                    case '2':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>𝜆:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={lamda} onChange={(e) => setLamda(e.target.value)} />\n                            </div>\n                        </div>\n                    case '3':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Media:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={media} onChange={(e) => setMedia(e.target.value)} />\n                            </div>\n                        </div>\n                    case '4':\n                        return <div className='row'>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Media de piezas:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={mediaPiezas} onChange={(e) => setMediaPiezas(e.target.value)} />\n                            </div>\n                            <div className='col-2'>\n                                <label htmlFor='generar'>Probabilidad de piezas:</label>\n                                <input id='generar' type='number' className=\"form-control\" value={probaPiezas} onChange={(e) => setProbaPiezas(e.target.value)} />\n                            </div>\n                        </div>\n\n                    default:\n                        return null;\n                }\n            })()}\n            <br />\n            <div className='row'>\n                <div className='col-12' >\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">ri</th>\n                                <th scope=\"col\">Xi</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                generatedNums.map((e) => {\n                                    return (\n                                        <tr scope=\"row\">\n                                            <td>{e.r}</td>\n                                            <td>{e.x}</td>\n                                        </tr>\n                                    )\n                                }\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TransformadaInversa","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport CorridaArribaAbajoMedia from './corridaArribaAbajoMedia';\nimport CuadradosMedios from './cuadradosMedios';\nimport ProductosMedios from './productosMedios';\nimport MultiplicadorConstante from './multiplicadorConstante';\nimport Lineal from './lineal';\nimport CongruencialMultiplicativo from './congruencialMultiplicativo';\nimport CongruencialAditivo from './congruencialAditivo';\nimport CongruencialCuadratico from './congruencialCuadrativo';\nimport Medias from './medias';\nimport Varianza from './varianza'\nimport Series from './series'\nimport CorridaArribaAbajo from './corridaArribaAbajo'\nimport Kolmogorov from './kolmogorov'\nimport ChiCuadrada from './chi-Cuadrada'\nimport TransformadaInversa from './transformadaInversa'\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/corrida-arriba-abajo-media\" component={CorridaArribaAbajoMedia} exact />\n            <Route path=\"/corrida-arriba-abajo\" component={CorridaArribaAbajo} exact />\n            <Route path=\"/cuadrados-medios\" component={CuadradosMedios} exact />\n            <Route path=\"/productos-medios\" component={ProductosMedios} exact />\n            <Route path=\"/mutiplicador-constante\" component={MultiplicadorConstante} exact />\n            <Route path=\"/lineal\" component={Lineal} exact />\n            <Route path=\"/congruencial-multiplicativo\" component={CongruencialMultiplicativo} exact />\n            <Route path=\"/congruencial-aditivo\" component={CongruencialAditivo} exact />\n            <Route path=\"/congruencial-cuadratico\" component={CongruencialCuadratico} exact />\n            <Route path=\"/medias\" component={Medias} exact />\n            <Route path=\"/varianza\" component={Varianza} exact />\n            <Route path=\"/series\" component={Series} exact />\n            <Route path=\"/kolmogorov\" component={Kolmogorov} exact />\n            <Route path=\"/chi-cuadrada\" component={ChiCuadrada} exact />\n            <Route path=\"/transformada-inversa\" component={TransformadaInversa} exact />\n        </Switch>\n    );\n}\n\nexport default Routes;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\n\nconst Header = () => {\n    return (\n        <div>\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                <Link className='navbar-brand' to=\"/\">Proyecto Simulacion</Link>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <NavDropdown title=\"Algoritmo\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/cuadrados-medios\">Cuadrados Medios</Link>\n                            <Link className='dropdown-item' to=\"/productos-medios\">Productos Medios</Link>\n                            <Link className='dropdown-item' to=\"/mutiplicador-constante\">Multiplicador Constante</Link>\n                            <Link className='dropdown-item' to=\"/lineal\">Lineal</Link>\n                            <Link className='dropdown-item' to=\"/congruencial-multiplicativo\">Congruencial Multiplicativo</Link>\n                            <Link className='dropdown-item' to=\"/congruencial-aditivo\">Congruencial Aditivo</Link>\n                            <Link className='dropdown-item' to=\"/congruencial-cuadratico\">Congruencial Cuadrativo</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/medias\">Medias</Link>\n                            <Link className='dropdown-item' to=\"/varianza\">Varianza</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas Uniformidad\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/chi-cuadrada\">Chi Cuadrada</Link>\n                            <Link className='dropdown-item' to=\"/kolmogorov\">Kolmogorov</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Pruebas Independencia\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/corrida-arriba-abajo\">Corridas Arriba y Abajo</Link>\n                            <Link className='dropdown-item' to=\"/corrida-arriba-abajo-media\">Corridas Arriba y Abajo Media</Link>\n                            <Link className='dropdown-item' to=\"/series\">Series</Link>\n                        </NavDropdown>\n                        <NavDropdown title=\"Metodos\" id=\"basic-nav-dropdown\">\n                            <Link className='dropdown-item' to=\"/transformada-inversa\">Transformada Inversa</Link>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport Routes from './components/routes';\nimport Menu from './components/menu';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Menu />\n      <div className='container'>\n        <br></br>\n        <Routes />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}